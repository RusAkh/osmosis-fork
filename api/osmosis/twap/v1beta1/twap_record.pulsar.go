// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package twapv1beta1

import (
	_ "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_TwapRecord                                protoreflect.MessageDescriptor
	fd_TwapRecord_pool_id                        protoreflect.FieldDescriptor
	fd_TwapRecord_asset0_denom                   protoreflect.FieldDescriptor
	fd_TwapRecord_asset1_denom                   protoreflect.FieldDescriptor
	fd_TwapRecord_height                         protoreflect.FieldDescriptor
	fd_TwapRecord_time                           protoreflect.FieldDescriptor
	fd_TwapRecord_p0_last_spot_price             protoreflect.FieldDescriptor
	fd_TwapRecord_p1_last_spot_price             protoreflect.FieldDescriptor
	fd_TwapRecord_p0_arithmetic_twap_accumulator protoreflect.FieldDescriptor
	fd_TwapRecord_p1_arithmetic_twap_accumulator protoreflect.FieldDescriptor
	fd_TwapRecord_last_error_time                protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_twap_v1beta1_twap_record_proto_init()
	md_TwapRecord = File_osmosis_twap_v1beta1_twap_record_proto.Messages().ByName("TwapRecord")
	fd_TwapRecord_pool_id = md_TwapRecord.Fields().ByName("pool_id")
	fd_TwapRecord_asset0_denom = md_TwapRecord.Fields().ByName("asset0_denom")
	fd_TwapRecord_asset1_denom = md_TwapRecord.Fields().ByName("asset1_denom")
	fd_TwapRecord_height = md_TwapRecord.Fields().ByName("height")
	fd_TwapRecord_time = md_TwapRecord.Fields().ByName("time")
	fd_TwapRecord_p0_last_spot_price = md_TwapRecord.Fields().ByName("p0_last_spot_price")
	fd_TwapRecord_p1_last_spot_price = md_TwapRecord.Fields().ByName("p1_last_spot_price")
	fd_TwapRecord_p0_arithmetic_twap_accumulator = md_TwapRecord.Fields().ByName("p0_arithmetic_twap_accumulator")
	fd_TwapRecord_p1_arithmetic_twap_accumulator = md_TwapRecord.Fields().ByName("p1_arithmetic_twap_accumulator")
	fd_TwapRecord_last_error_time = md_TwapRecord.Fields().ByName("last_error_time")
}

var _ protoreflect.Message = (*fastReflection_TwapRecord)(nil)

type fastReflection_TwapRecord TwapRecord

func (x *TwapRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TwapRecord)(x)
}

func (x *TwapRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_twap_v1beta1_twap_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TwapRecord_messageType fastReflection_TwapRecord_messageType
var _ protoreflect.MessageType = fastReflection_TwapRecord_messageType{}

type fastReflection_TwapRecord_messageType struct{}

func (x fastReflection_TwapRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TwapRecord)(nil)
}
func (x fastReflection_TwapRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_TwapRecord)
}
func (x fastReflection_TwapRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TwapRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TwapRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_TwapRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TwapRecord) Type() protoreflect.MessageType {
	return _fastReflection_TwapRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TwapRecord) New() protoreflect.Message {
	return new(fastReflection_TwapRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TwapRecord) Interface() protoreflect.ProtoMessage {
	return (*TwapRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TwapRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_TwapRecord_pool_id, value) {
			return
		}
	}
	if x.Asset0Denom != "" {
		value := protoreflect.ValueOfString(x.Asset0Denom)
		if !f(fd_TwapRecord_asset0_denom, value) {
			return
		}
	}
	if x.Asset1Denom != "" {
		value := protoreflect.ValueOfString(x.Asset1Denom)
		if !f(fd_TwapRecord_asset1_denom, value) {
			return
		}
	}
	if x.Height != int64(0) {
		value := protoreflect.ValueOfInt64(x.Height)
		if !f(fd_TwapRecord_height, value) {
			return
		}
	}
	if x.Time != nil {
		value := protoreflect.ValueOfMessage(x.Time.ProtoReflect())
		if !f(fd_TwapRecord_time, value) {
			return
		}
	}
	if x.P0LastSpotPrice != "" {
		value := protoreflect.ValueOfString(x.P0LastSpotPrice)
		if !f(fd_TwapRecord_p0_last_spot_price, value) {
			return
		}
	}
	if x.P1LastSpotPrice != "" {
		value := protoreflect.ValueOfString(x.P1LastSpotPrice)
		if !f(fd_TwapRecord_p1_last_spot_price, value) {
			return
		}
	}
	if x.P0ArithmeticTwapAccumulator != "" {
		value := protoreflect.ValueOfString(x.P0ArithmeticTwapAccumulator)
		if !f(fd_TwapRecord_p0_arithmetic_twap_accumulator, value) {
			return
		}
	}
	if x.P1ArithmeticTwapAccumulator != "" {
		value := protoreflect.ValueOfString(x.P1ArithmeticTwapAccumulator)
		if !f(fd_TwapRecord_p1_arithmetic_twap_accumulator, value) {
			return
		}
	}
	if x.LastErrorTime != nil {
		value := protoreflect.ValueOfMessage(x.LastErrorTime.ProtoReflect())
		if !f(fd_TwapRecord_last_error_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TwapRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.twap.v1beta1.TwapRecord.pool_id":
		return x.PoolId != uint64(0)
	case "osmosis.twap.v1beta1.TwapRecord.asset0_denom":
		return x.Asset0Denom != ""
	case "osmosis.twap.v1beta1.TwapRecord.asset1_denom":
		return x.Asset1Denom != ""
	case "osmosis.twap.v1beta1.TwapRecord.height":
		return x.Height != int64(0)
	case "osmosis.twap.v1beta1.TwapRecord.time":
		return x.Time != nil
	case "osmosis.twap.v1beta1.TwapRecord.p0_last_spot_price":
		return x.P0LastSpotPrice != ""
	case "osmosis.twap.v1beta1.TwapRecord.p1_last_spot_price":
		return x.P1LastSpotPrice != ""
	case "osmosis.twap.v1beta1.TwapRecord.p0_arithmetic_twap_accumulator":
		return x.P0ArithmeticTwapAccumulator != ""
	case "osmosis.twap.v1beta1.TwapRecord.p1_arithmetic_twap_accumulator":
		return x.P1ArithmeticTwapAccumulator != ""
	case "osmosis.twap.v1beta1.TwapRecord.last_error_time":
		return x.LastErrorTime != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.twap.v1beta1.TwapRecord"))
		}
		panic(fmt.Errorf("message osmosis.twap.v1beta1.TwapRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TwapRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.twap.v1beta1.TwapRecord.pool_id":
		x.PoolId = uint64(0)
	case "osmosis.twap.v1beta1.TwapRecord.asset0_denom":
		x.Asset0Denom = ""
	case "osmosis.twap.v1beta1.TwapRecord.asset1_denom":
		x.Asset1Denom = ""
	case "osmosis.twap.v1beta1.TwapRecord.height":
		x.Height = int64(0)
	case "osmosis.twap.v1beta1.TwapRecord.time":
		x.Time = nil
	case "osmosis.twap.v1beta1.TwapRecord.p0_last_spot_price":
		x.P0LastSpotPrice = ""
	case "osmosis.twap.v1beta1.TwapRecord.p1_last_spot_price":
		x.P1LastSpotPrice = ""
	case "osmosis.twap.v1beta1.TwapRecord.p0_arithmetic_twap_accumulator":
		x.P0ArithmeticTwapAccumulator = ""
	case "osmosis.twap.v1beta1.TwapRecord.p1_arithmetic_twap_accumulator":
		x.P1ArithmeticTwapAccumulator = ""
	case "osmosis.twap.v1beta1.TwapRecord.last_error_time":
		x.LastErrorTime = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.twap.v1beta1.TwapRecord"))
		}
		panic(fmt.Errorf("message osmosis.twap.v1beta1.TwapRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TwapRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.twap.v1beta1.TwapRecord.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "osmosis.twap.v1beta1.TwapRecord.asset0_denom":
		value := x.Asset0Denom
		return protoreflect.ValueOfString(value)
	case "osmosis.twap.v1beta1.TwapRecord.asset1_denom":
		value := x.Asset1Denom
		return protoreflect.ValueOfString(value)
	case "osmosis.twap.v1beta1.TwapRecord.height":
		value := x.Height
		return protoreflect.ValueOfInt64(value)
	case "osmosis.twap.v1beta1.TwapRecord.time":
		value := x.Time
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "osmosis.twap.v1beta1.TwapRecord.p0_last_spot_price":
		value := x.P0LastSpotPrice
		return protoreflect.ValueOfString(value)
	case "osmosis.twap.v1beta1.TwapRecord.p1_last_spot_price":
		value := x.P1LastSpotPrice
		return protoreflect.ValueOfString(value)
	case "osmosis.twap.v1beta1.TwapRecord.p0_arithmetic_twap_accumulator":
		value := x.P0ArithmeticTwapAccumulator
		return protoreflect.ValueOfString(value)
	case "osmosis.twap.v1beta1.TwapRecord.p1_arithmetic_twap_accumulator":
		value := x.P1ArithmeticTwapAccumulator
		return protoreflect.ValueOfString(value)
	case "osmosis.twap.v1beta1.TwapRecord.last_error_time":
		value := x.LastErrorTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.twap.v1beta1.TwapRecord"))
		}
		panic(fmt.Errorf("message osmosis.twap.v1beta1.TwapRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TwapRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.twap.v1beta1.TwapRecord.pool_id":
		x.PoolId = value.Uint()
	case "osmosis.twap.v1beta1.TwapRecord.asset0_denom":
		x.Asset0Denom = value.Interface().(string)
	case "osmosis.twap.v1beta1.TwapRecord.asset1_denom":
		x.Asset1Denom = value.Interface().(string)
	case "osmosis.twap.v1beta1.TwapRecord.height":
		x.Height = value.Int()
	case "osmosis.twap.v1beta1.TwapRecord.time":
		x.Time = value.Message().Interface().(*timestamppb.Timestamp)
	case "osmosis.twap.v1beta1.TwapRecord.p0_last_spot_price":
		x.P0LastSpotPrice = value.Interface().(string)
	case "osmosis.twap.v1beta1.TwapRecord.p1_last_spot_price":
		x.P1LastSpotPrice = value.Interface().(string)
	case "osmosis.twap.v1beta1.TwapRecord.p0_arithmetic_twap_accumulator":
		x.P0ArithmeticTwapAccumulator = value.Interface().(string)
	case "osmosis.twap.v1beta1.TwapRecord.p1_arithmetic_twap_accumulator":
		x.P1ArithmeticTwapAccumulator = value.Interface().(string)
	case "osmosis.twap.v1beta1.TwapRecord.last_error_time":
		x.LastErrorTime = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.twap.v1beta1.TwapRecord"))
		}
		panic(fmt.Errorf("message osmosis.twap.v1beta1.TwapRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TwapRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.twap.v1beta1.TwapRecord.time":
		if x.Time == nil {
			x.Time = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Time.ProtoReflect())
	case "osmosis.twap.v1beta1.TwapRecord.last_error_time":
		if x.LastErrorTime == nil {
			x.LastErrorTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastErrorTime.ProtoReflect())
	case "osmosis.twap.v1beta1.TwapRecord.pool_id":
		panic(fmt.Errorf("field pool_id of message osmosis.twap.v1beta1.TwapRecord is not mutable"))
	case "osmosis.twap.v1beta1.TwapRecord.asset0_denom":
		panic(fmt.Errorf("field asset0_denom of message osmosis.twap.v1beta1.TwapRecord is not mutable"))
	case "osmosis.twap.v1beta1.TwapRecord.asset1_denom":
		panic(fmt.Errorf("field asset1_denom of message osmosis.twap.v1beta1.TwapRecord is not mutable"))
	case "osmosis.twap.v1beta1.TwapRecord.height":
		panic(fmt.Errorf("field height of message osmosis.twap.v1beta1.TwapRecord is not mutable"))
	case "osmosis.twap.v1beta1.TwapRecord.p0_last_spot_price":
		panic(fmt.Errorf("field p0_last_spot_price of message osmosis.twap.v1beta1.TwapRecord is not mutable"))
	case "osmosis.twap.v1beta1.TwapRecord.p1_last_spot_price":
		panic(fmt.Errorf("field p1_last_spot_price of message osmosis.twap.v1beta1.TwapRecord is not mutable"))
	case "osmosis.twap.v1beta1.TwapRecord.p0_arithmetic_twap_accumulator":
		panic(fmt.Errorf("field p0_arithmetic_twap_accumulator of message osmosis.twap.v1beta1.TwapRecord is not mutable"))
	case "osmosis.twap.v1beta1.TwapRecord.p1_arithmetic_twap_accumulator":
		panic(fmt.Errorf("field p1_arithmetic_twap_accumulator of message osmosis.twap.v1beta1.TwapRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.twap.v1beta1.TwapRecord"))
		}
		panic(fmt.Errorf("message osmosis.twap.v1beta1.TwapRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TwapRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.twap.v1beta1.TwapRecord.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "osmosis.twap.v1beta1.TwapRecord.asset0_denom":
		return protoreflect.ValueOfString("")
	case "osmosis.twap.v1beta1.TwapRecord.asset1_denom":
		return protoreflect.ValueOfString("")
	case "osmosis.twap.v1beta1.TwapRecord.height":
		return protoreflect.ValueOfInt64(int64(0))
	case "osmosis.twap.v1beta1.TwapRecord.time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "osmosis.twap.v1beta1.TwapRecord.p0_last_spot_price":
		return protoreflect.ValueOfString("")
	case "osmosis.twap.v1beta1.TwapRecord.p1_last_spot_price":
		return protoreflect.ValueOfString("")
	case "osmosis.twap.v1beta1.TwapRecord.p0_arithmetic_twap_accumulator":
		return protoreflect.ValueOfString("")
	case "osmosis.twap.v1beta1.TwapRecord.p1_arithmetic_twap_accumulator":
		return protoreflect.ValueOfString("")
	case "osmosis.twap.v1beta1.TwapRecord.last_error_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.twap.v1beta1.TwapRecord"))
		}
		panic(fmt.Errorf("message osmosis.twap.v1beta1.TwapRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TwapRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.twap.v1beta1.TwapRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TwapRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TwapRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TwapRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TwapRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TwapRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		l = len(x.Asset0Denom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Asset1Denom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.Time != nil {
			l = options.Size(x.Time)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.P0LastSpotPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.P1LastSpotPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.P0ArithmeticTwapAccumulator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.P1ArithmeticTwapAccumulator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastErrorTime != nil {
			l = options.Size(x.LastErrorTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TwapRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastErrorTime != nil {
			encoded, err := options.Marshal(x.LastErrorTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.P1ArithmeticTwapAccumulator) > 0 {
			i -= len(x.P1ArithmeticTwapAccumulator)
			copy(dAtA[i:], x.P1ArithmeticTwapAccumulator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.P1ArithmeticTwapAccumulator)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.P0ArithmeticTwapAccumulator) > 0 {
			i -= len(x.P0ArithmeticTwapAccumulator)
			copy(dAtA[i:], x.P0ArithmeticTwapAccumulator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.P0ArithmeticTwapAccumulator)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.P1LastSpotPrice) > 0 {
			i -= len(x.P1LastSpotPrice)
			copy(dAtA[i:], x.P1LastSpotPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.P1LastSpotPrice)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.P0LastSpotPrice) > 0 {
			i -= len(x.P0LastSpotPrice)
			copy(dAtA[i:], x.P0LastSpotPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.P0LastSpotPrice)))
			i--
			dAtA[i] = 0x32
		}
		if x.Time != nil {
			encoded, err := options.Marshal(x.Time)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Asset1Denom) > 0 {
			i -= len(x.Asset1Denom)
			copy(dAtA[i:], x.Asset1Denom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Asset1Denom)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Asset0Denom) > 0 {
			i -= len(x.Asset0Denom)
			copy(dAtA[i:], x.Asset0Denom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Asset0Denom)))
			i--
			dAtA[i] = 0x12
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TwapRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TwapRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TwapRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Asset0Denom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Asset0Denom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Asset1Denom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Asset1Denom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Time == nil {
					x.Time = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Time); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field P0LastSpotPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.P0LastSpotPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field P1LastSpotPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.P1LastSpotPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field P0ArithmeticTwapAccumulator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.P0ArithmeticTwapAccumulator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field P1ArithmeticTwapAccumulator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.P1ArithmeticTwapAccumulator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastErrorTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastErrorTime == nil {
					x.LastErrorTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastErrorTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: osmosis/twap/v1beta1/twap_record.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A TWAP record should be indexed in state by pool_id, (asset pair), timestamp
// The asset pair assets should be lexicographically sorted.
// Technically (pool_id, asset_0_denom, asset_1_denom, height) do not need to
// appear in the struct however we view this as the wrong performance tradeoff
// given SDK today. Would rather we optimize for readability and correctness,
// than an optimal state storage format. The system bottleneck is elsewhere for
// now.
type TwapRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Lexicographically smaller denom of the pair
	Asset0Denom string `protobuf:"bytes,2,opt,name=asset0_denom,json=asset0Denom,proto3" json:"asset0_denom,omitempty"`
	// Lexicographically larger denom of the pair
	Asset1Denom string `protobuf:"bytes,3,opt,name=asset1_denom,json=asset1Denom,proto3" json:"asset1_denom,omitempty"`
	// height this record corresponds to, for debugging purposes
	Height int64 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	// This field should only exist until we have a global registry in the state
	// machine, mapping prior block heights within {TIME RANGE} to times.
	Time *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	// We store the last spot prices in the struct, so that we can interpolate
	// accumulator values for times between when accumulator records are stored.
	P0LastSpotPrice             string `protobuf:"bytes,6,opt,name=p0_last_spot_price,json=p0LastSpotPrice,proto3" json:"p0_last_spot_price,omitempty"`
	P1LastSpotPrice             string `protobuf:"bytes,7,opt,name=p1_last_spot_price,json=p1LastSpotPrice,proto3" json:"p1_last_spot_price,omitempty"`
	P0ArithmeticTwapAccumulator string `protobuf:"bytes,8,opt,name=p0_arithmetic_twap_accumulator,json=p0ArithmeticTwapAccumulator,proto3" json:"p0_arithmetic_twap_accumulator,omitempty"`
	P1ArithmeticTwapAccumulator string `protobuf:"bytes,9,opt,name=p1_arithmetic_twap_accumulator,json=p1ArithmeticTwapAccumulator,proto3" json:"p1_arithmetic_twap_accumulator,omitempty"`
	// This field contains the time in which the last spot price error occured.
	// It is used to alert the caller if they are getting a potentially erroneous
	// TWAP, due to an unforeseen underlying error.
	LastErrorTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_error_time,json=lastErrorTime,proto3" json:"last_error_time,omitempty"`
}

func (x *TwapRecord) Reset() {
	*x = TwapRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_twap_v1beta1_twap_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwapRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwapRecord) ProtoMessage() {}

// Deprecated: Use TwapRecord.ProtoReflect.Descriptor instead.
func (*TwapRecord) Descriptor() ([]byte, []int) {
	return file_osmosis_twap_v1beta1_twap_record_proto_rawDescGZIP(), []int{0}
}

func (x *TwapRecord) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *TwapRecord) GetAsset0Denom() string {
	if x != nil {
		return x.Asset0Denom
	}
	return ""
}

func (x *TwapRecord) GetAsset1Denom() string {
	if x != nil {
		return x.Asset1Denom
	}
	return ""
}

func (x *TwapRecord) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TwapRecord) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TwapRecord) GetP0LastSpotPrice() string {
	if x != nil {
		return x.P0LastSpotPrice
	}
	return ""
}

func (x *TwapRecord) GetP1LastSpotPrice() string {
	if x != nil {
		return x.P1LastSpotPrice
	}
	return ""
}

func (x *TwapRecord) GetP0ArithmeticTwapAccumulator() string {
	if x != nil {
		return x.P0ArithmeticTwapAccumulator
	}
	return ""
}

func (x *TwapRecord) GetP1ArithmeticTwapAccumulator() string {
	if x != nil {
		return x.P1ArithmeticTwapAccumulator
	}
	return ""
}

func (x *TwapRecord) GetLastErrorTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastErrorTime
	}
	return nil
}

var File_osmosis_twap_v1beta1_twap_record_proto protoreflect.FileDescriptor

var file_osmosis_twap_v1beta1_twap_record_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x74, 0x77, 0x61, 0x70, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x74, 0x77, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69,
	0x73, 0x2e, 0x74, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x14,
	0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x06, 0x0a, 0x0a,
	0x54, 0x77, 0x61, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x30, 0x5f, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x30, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x31,
	0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x31, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x41, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x29, 0xea, 0xde, 0x1f, 0x0d, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0xf2, 0xde, 0x1f, 0x14,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1e, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x12,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x12,
	0x70, 0x30, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0f, 0x70, 0x30, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x70, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x70, 0x31, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0f, 0x70, 0x31, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x70, 0x6f,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a, 0x1e, 0x70, 0x30, 0x5f, 0x61, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x1b,
	0x70, 0x30, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x54, 0x77, 0x61, 0x70,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x73, 0x0a, 0x1e, 0x70,
	0x31, 0x5f, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x77, 0x61,
	0x70, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0x52, 0x1b, 0x70, 0x31, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x54, 0x77, 0x61, 0x70, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x66, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x22, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x16, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x42, 0xd0, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d,
	0x2e, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x74, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0f, 0x54, 0x77, 0x61, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x31, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x69, 0x73, 0x2f, 0x74, 0x77, 0x61, 0x70, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b,
	0x74, 0x77, 0x61, 0x70, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4f, 0x54,
	0x58, 0xaa, 0x02, 0x14, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x54, 0x77, 0x61, 0x70,
	0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x14, 0x4f, 0x73, 0x6d, 0x6f, 0x73,
	0x69, 0x73, 0x5c, 0x54, 0x77, 0x61, 0x70, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xe2,
	0x02, 0x20, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x5c, 0x54, 0x77, 0x61, 0x70, 0x5c, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x16, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x3a, 0x3a, 0x54, 0x77,
	0x61, 0x70, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_osmosis_twap_v1beta1_twap_record_proto_rawDescOnce sync.Once
	file_osmosis_twap_v1beta1_twap_record_proto_rawDescData = file_osmosis_twap_v1beta1_twap_record_proto_rawDesc
)

func file_osmosis_twap_v1beta1_twap_record_proto_rawDescGZIP() []byte {
	file_osmosis_twap_v1beta1_twap_record_proto_rawDescOnce.Do(func() {
		file_osmosis_twap_v1beta1_twap_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_osmosis_twap_v1beta1_twap_record_proto_rawDescData)
	})
	return file_osmosis_twap_v1beta1_twap_record_proto_rawDescData
}

var file_osmosis_twap_v1beta1_twap_record_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_osmosis_twap_v1beta1_twap_record_proto_goTypes = []interface{}{
	(*TwapRecord)(nil),            // 0: osmosis.twap.v1beta1.TwapRecord
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_osmosis_twap_v1beta1_twap_record_proto_depIdxs = []int32{
	1, // 0: osmosis.twap.v1beta1.TwapRecord.time:type_name -> google.protobuf.Timestamp
	1, // 1: osmosis.twap.v1beta1.TwapRecord.last_error_time:type_name -> google.protobuf.Timestamp
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_osmosis_twap_v1beta1_twap_record_proto_init() }
func file_osmosis_twap_v1beta1_twap_record_proto_init() {
	if File_osmosis_twap_v1beta1_twap_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_osmosis_twap_v1beta1_twap_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwapRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_osmosis_twap_v1beta1_twap_record_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_osmosis_twap_v1beta1_twap_record_proto_goTypes,
		DependencyIndexes: file_osmosis_twap_v1beta1_twap_record_proto_depIdxs,
		MessageInfos:      file_osmosis_twap_v1beta1_twap_record_proto_msgTypes,
	}.Build()
	File_osmosis_twap_v1beta1_twap_record_proto = out.File
	file_osmosis_twap_v1beta1_twap_record_proto_rawDesc = nil
	file_osmosis_twap_v1beta1_twap_record_proto_goTypes = nil
	file_osmosis_twap_v1beta1_twap_record_proto_depIdxs = nil
}
