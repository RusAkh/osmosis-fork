// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package stableswapv1beta1

import (
	_ "cosmossdk.io/api/cosmos/auth/v1beta1"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_PoolParams          protoreflect.MessageDescriptor
	fd_PoolParams_swap_fee protoreflect.FieldDescriptor
	fd_PoolParams_exit_fee protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_init()
	md_PoolParams = File_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto.Messages().ByName("PoolParams")
	fd_PoolParams_swap_fee = md_PoolParams.Fields().ByName("swap_fee")
	fd_PoolParams_exit_fee = md_PoolParams.Fields().ByName("exit_fee")
}

var _ protoreflect.Message = (*fastReflection_PoolParams)(nil)

type fastReflection_PoolParams PoolParams

func (x *PoolParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PoolParams)(x)
}

func (x *PoolParams) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PoolParams_messageType fastReflection_PoolParams_messageType
var _ protoreflect.MessageType = fastReflection_PoolParams_messageType{}

type fastReflection_PoolParams_messageType struct{}

func (x fastReflection_PoolParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PoolParams)(nil)
}
func (x fastReflection_PoolParams_messageType) New() protoreflect.Message {
	return new(fastReflection_PoolParams)
}
func (x fastReflection_PoolParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PoolParams) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PoolParams) Type() protoreflect.MessageType {
	return _fastReflection_PoolParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PoolParams) New() protoreflect.Message {
	return new(fastReflection_PoolParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PoolParams) Interface() protoreflect.ProtoMessage {
	return (*PoolParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PoolParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SwapFee != "" {
		value := protoreflect.ValueOfString(x.SwapFee)
		if !f(fd_PoolParams_swap_fee, value) {
			return
		}
	}
	if x.ExitFee != "" {
		value := protoreflect.ValueOfString(x.ExitFee)
		if !f(fd_PoolParams_exit_fee, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PoolParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.swap_fee":
		return x.SwapFee != ""
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.exit_fee":
		return x.ExitFee != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.swap_fee":
		x.SwapFee = ""
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.exit_fee":
		x.ExitFee = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PoolParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.swap_fee":
		value := x.SwapFee
		return protoreflect.ValueOfString(value)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.exit_fee":
		value := x.ExitFee
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.swap_fee":
		x.SwapFee = value.Interface().(string)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.exit_fee":
		x.ExitFee = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.swap_fee":
		panic(fmt.Errorf("field swap_fee of message osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams is not mutable"))
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.exit_fee":
		panic(fmt.Errorf("field exit_fee of message osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PoolParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.swap_fee":
		return protoreflect.ValueOfString("")
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams.exit_fee":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PoolParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PoolParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PoolParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PoolParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PoolParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SwapFee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExitFee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PoolParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ExitFee) > 0 {
			i -= len(x.ExitFee)
			copy(dAtA[i:], x.ExitFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExitFee)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SwapFee) > 0 {
			i -= len(x.SwapFee)
			copy(dAtA[i:], x.SwapFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SwapFee)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PoolParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SwapFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExitFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExitFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Pool_6_list)(nil)

type _Pool_6_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Pool_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Pool_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Pool_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Pool_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Pool_6_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Pool_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Pool_6_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Pool_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Pool_7_list)(nil)

type _Pool_7_list struct {
	list *[]uint64
}

func (x *_Pool_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Pool_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_Pool_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Pool_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Pool_7_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Pool at list field ScalingFactors as it is not of Message kind"))
}

func (x *_Pool_7_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Pool_7_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_Pool_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Pool                           protoreflect.MessageDescriptor
	fd_Pool_address                   protoreflect.FieldDescriptor
	fd_Pool_id                        protoreflect.FieldDescriptor
	fd_Pool_pool_params               protoreflect.FieldDescriptor
	fd_Pool_future_pool_governor      protoreflect.FieldDescriptor
	fd_Pool_total_shares              protoreflect.FieldDescriptor
	fd_Pool_pool_liquidity            protoreflect.FieldDescriptor
	fd_Pool_scaling_factors           protoreflect.FieldDescriptor
	fd_Pool_scaling_factor_controller protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_init()
	md_Pool = File_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto.Messages().ByName("Pool")
	fd_Pool_address = md_Pool.Fields().ByName("address")
	fd_Pool_id = md_Pool.Fields().ByName("id")
	fd_Pool_pool_params = md_Pool.Fields().ByName("pool_params")
	fd_Pool_future_pool_governor = md_Pool.Fields().ByName("future_pool_governor")
	fd_Pool_total_shares = md_Pool.Fields().ByName("total_shares")
	fd_Pool_pool_liquidity = md_Pool.Fields().ByName("pool_liquidity")
	fd_Pool_scaling_factors = md_Pool.Fields().ByName("scaling_factors")
	fd_Pool_scaling_factor_controller = md_Pool.Fields().ByName("scaling_factor_controller")
}

var _ protoreflect.Message = (*fastReflection_Pool)(nil)

type fastReflection_Pool Pool

func (x *Pool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Pool)(x)
}

func (x *Pool) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Pool_messageType fastReflection_Pool_messageType
var _ protoreflect.MessageType = fastReflection_Pool_messageType{}

type fastReflection_Pool_messageType struct{}

func (x fastReflection_Pool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Pool)(nil)
}
func (x fastReflection_Pool_messageType) New() protoreflect.Message {
	return new(fastReflection_Pool)
}
func (x fastReflection_Pool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Pool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Pool) Descriptor() protoreflect.MessageDescriptor {
	return md_Pool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Pool) Type() protoreflect.MessageType {
	return _fastReflection_Pool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Pool) New() protoreflect.Message {
	return new(fastReflection_Pool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Pool) Interface() protoreflect.ProtoMessage {
	return (*Pool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Pool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_Pool_address, value) {
			return
		}
	}
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Pool_id, value) {
			return
		}
	}
	if x.PoolParams != nil {
		value := protoreflect.ValueOfMessage(x.PoolParams.ProtoReflect())
		if !f(fd_Pool_pool_params, value) {
			return
		}
	}
	if x.FuturePoolGovernor != "" {
		value := protoreflect.ValueOfString(x.FuturePoolGovernor)
		if !f(fd_Pool_future_pool_governor, value) {
			return
		}
	}
	if x.TotalShares != nil {
		value := protoreflect.ValueOfMessage(x.TotalShares.ProtoReflect())
		if !f(fd_Pool_total_shares, value) {
			return
		}
	}
	if len(x.PoolLiquidity) != 0 {
		value := protoreflect.ValueOfList(&_Pool_6_list{list: &x.PoolLiquidity})
		if !f(fd_Pool_pool_liquidity, value) {
			return
		}
	}
	if len(x.ScalingFactors) != 0 {
		value := protoreflect.ValueOfList(&_Pool_7_list{list: &x.ScalingFactors})
		if !f(fd_Pool_scaling_factors, value) {
			return
		}
	}
	if x.ScalingFactorController != "" {
		value := protoreflect.ValueOfString(x.ScalingFactorController)
		if !f(fd_Pool_scaling_factor_controller, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Pool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.address":
		return x.Address != ""
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.id":
		return x.Id != uint64(0)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_params":
		return x.PoolParams != nil
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.future_pool_governor":
		return x.FuturePoolGovernor != ""
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.total_shares":
		return x.TotalShares != nil
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_liquidity":
		return len(x.PoolLiquidity) != 0
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factors":
		return len(x.ScalingFactors) != 0
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factor_controller":
		return x.ScalingFactorController != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.Pool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.address":
		x.Address = ""
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.id":
		x.Id = uint64(0)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_params":
		x.PoolParams = nil
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.future_pool_governor":
		x.FuturePoolGovernor = ""
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.total_shares":
		x.TotalShares = nil
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_liquidity":
		x.PoolLiquidity = nil
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factors":
		x.ScalingFactors = nil
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factor_controller":
		x.ScalingFactorController = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.Pool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Pool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_params":
		value := x.PoolParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.future_pool_governor":
		value := x.FuturePoolGovernor
		return protoreflect.ValueOfString(value)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.total_shares":
		value := x.TotalShares
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_liquidity":
		if len(x.PoolLiquidity) == 0 {
			return protoreflect.ValueOfList(&_Pool_6_list{})
		}
		listValue := &_Pool_6_list{list: &x.PoolLiquidity}
		return protoreflect.ValueOfList(listValue)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factors":
		if len(x.ScalingFactors) == 0 {
			return protoreflect.ValueOfList(&_Pool_7_list{})
		}
		listValue := &_Pool_7_list{list: &x.ScalingFactors}
		return protoreflect.ValueOfList(listValue)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factor_controller":
		value := x.ScalingFactorController
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.Pool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.address":
		x.Address = value.Interface().(string)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.id":
		x.Id = value.Uint()
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_params":
		x.PoolParams = value.Message().Interface().(*PoolParams)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.future_pool_governor":
		x.FuturePoolGovernor = value.Interface().(string)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.total_shares":
		x.TotalShares = value.Message().Interface().(*v1beta1.Coin)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_liquidity":
		lv := value.List()
		clv := lv.(*_Pool_6_list)
		x.PoolLiquidity = *clv.list
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factors":
		lv := value.List()
		clv := lv.(*_Pool_7_list)
		x.ScalingFactors = *clv.list
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factor_controller":
		x.ScalingFactorController = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.Pool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_params":
		if x.PoolParams == nil {
			x.PoolParams = new(PoolParams)
		}
		return protoreflect.ValueOfMessage(x.PoolParams.ProtoReflect())
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.total_shares":
		if x.TotalShares == nil {
			x.TotalShares = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.TotalShares.ProtoReflect())
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_liquidity":
		if x.PoolLiquidity == nil {
			x.PoolLiquidity = []*v1beta1.Coin{}
		}
		value := &_Pool_6_list{list: &x.PoolLiquidity}
		return protoreflect.ValueOfList(value)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factors":
		if x.ScalingFactors == nil {
			x.ScalingFactors = []uint64{}
		}
		value := &_Pool_7_list{list: &x.ScalingFactors}
		return protoreflect.ValueOfList(value)
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.address":
		panic(fmt.Errorf("field address of message osmosis.gamm.poolmodels.stableswap.v1beta1.Pool is not mutable"))
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.id":
		panic(fmt.Errorf("field id of message osmosis.gamm.poolmodels.stableswap.v1beta1.Pool is not mutable"))
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.future_pool_governor":
		panic(fmt.Errorf("field future_pool_governor of message osmosis.gamm.poolmodels.stableswap.v1beta1.Pool is not mutable"))
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factor_controller":
		panic(fmt.Errorf("field scaling_factor_controller of message osmosis.gamm.poolmodels.stableswap.v1beta1.Pool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.Pool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Pool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.address":
		return protoreflect.ValueOfString("")
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_params":
		m := new(PoolParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.future_pool_governor":
		return protoreflect.ValueOfString("")
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.total_shares":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_liquidity":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Pool_6_list{list: &list})
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factors":
		list := []uint64{}
		return protoreflect.ValueOfList(&_Pool_7_list{list: &list})
	case "osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.scaling_factor_controller":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.gamm.poolmodels.stableswap.v1beta1.Pool"))
		}
		panic(fmt.Errorf("message osmosis.gamm.poolmodels.stableswap.v1beta1.Pool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Pool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.gamm.poolmodels.stableswap.v1beta1.Pool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Pool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Pool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Pool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.PoolParams != nil {
			l = options.Size(x.PoolParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FuturePoolGovernor)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TotalShares != nil {
			l = options.Size(x.TotalShares)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PoolLiquidity) > 0 {
			for _, e := range x.PoolLiquidity {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ScalingFactors) > 0 {
			l = 0
			for _, e := range x.ScalingFactors {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		l = len(x.ScalingFactorController)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ScalingFactorController) > 0 {
			i -= len(x.ScalingFactorController)
			copy(dAtA[i:], x.ScalingFactorController)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ScalingFactorController)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.ScalingFactors) > 0 {
			var pksize2 int
			for _, num := range x.ScalingFactors {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.ScalingFactors {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.PoolLiquidity) > 0 {
			for iNdEx := len(x.PoolLiquidity) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PoolLiquidity[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if x.TotalShares != nil {
			encoded, err := options.Marshal(x.TotalShares)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.FuturePoolGovernor) > 0 {
			i -= len(x.FuturePoolGovernor)
			copy(dAtA[i:], x.FuturePoolGovernor)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FuturePoolGovernor)))
			i--
			dAtA[i] = 0x22
		}
		if x.PoolParams != nil {
			encoded, err := options.Marshal(x.PoolParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Pool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PoolParams == nil {
					x.PoolParams = &PoolParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PoolParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FuturePoolGovernor", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FuturePoolGovernor = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TotalShares == nil {
					x.TotalShares = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalShares); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolLiquidity", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolLiquidity = append(x.PoolLiquidity, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PoolLiquidity[len(x.PoolLiquidity)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ScalingFactors = append(x.ScalingFactors, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.ScalingFactors) == 0 {
						x.ScalingFactors = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ScalingFactors = append(x.ScalingFactors, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ScalingFactors", wireType)
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ScalingFactorController", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ScalingFactorController = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: osmosis/gamm/pool-models/stableswap/stableswap_pool.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PoolParams defined the parameters that will be managed by the pool
// governance in the future. This params are not managed by the chain
// governance. Instead they will be managed by the token holders of the pool.
// The pool's token holders are specified in future_pool_governor.
type PoolParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapFee string `protobuf:"bytes,1,opt,name=swap_fee,json=swapFee,proto3" json:"swap_fee,omitempty"`
	ExitFee string `protobuf:"bytes,2,opt,name=exit_fee,json=exitFee,proto3" json:"exit_fee,omitempty"`
}

func (x *PoolParams) Reset() {
	*x = PoolParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolParams) ProtoMessage() {}

// Deprecated: Use PoolParams.ProtoReflect.Descriptor instead.
func (*PoolParams) Descriptor() ([]byte, []int) {
	return file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDescGZIP(), []int{0}
}

func (x *PoolParams) GetSwapFee() string {
	if x != nil {
		return x.SwapFee
	}
	return ""
}

func (x *PoolParams) GetExitFee() string {
	if x != nil {
		return x.ExitFee
	}
	return ""
}

// Pool is the stableswap Pool struct
type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Id         uint64      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PoolParams *PoolParams `protobuf:"bytes,3,opt,name=pool_params,json=poolParams,proto3" json:"pool_params,omitempty"`
	// This string specifies who will govern the pool in the future.
	// Valid forms of this are:
	// {token name},{duration}
	// {duration}
	// where {token name} if specified is the token which determines the
	// governor, and if not specified is the LP token for this pool.duration is
	// a time specified as 0w,1w,2w, etc. which specifies how long the token
	// would need to be locked up to count in governance. 0w means no lockup.
	FuturePoolGovernor string `protobuf:"bytes,4,opt,name=future_pool_governor,json=futurePoolGovernor,proto3" json:"future_pool_governor,omitempty"`
	// sum of all LP shares
	TotalShares *v1beta1.Coin `protobuf:"bytes,5,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	// assets in the pool
	PoolLiquidity []*v1beta1.Coin `protobuf:"bytes,6,rep,name=pool_liquidity,json=poolLiquidity,proto3" json:"pool_liquidity,omitempty"`
	// for calculation amognst assets with different precisions
	ScalingFactors []uint64 `protobuf:"varint,7,rep,packed,name=scaling_factors,json=scalingFactors,proto3" json:"scaling_factors,omitempty"`
	// scaling_factor_controller is the address can adjust pool scaling factors
	ScalingFactorController string `protobuf:"bytes,8,opt,name=scaling_factor_controller,json=scalingFactorController,proto3" json:"scaling_factor_controller,omitempty"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDescGZIP(), []int{1}
}

func (x *Pool) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Pool) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pool) GetPoolParams() *PoolParams {
	if x != nil {
		return x.PoolParams
	}
	return nil
}

func (x *Pool) GetFuturePoolGovernor() string {
	if x != nil {
		return x.FuturePoolGovernor
	}
	return ""
}

func (x *Pool) GetTotalShares() *v1beta1.Coin {
	if x != nil {
		return x.TotalShares
	}
	return nil
}

func (x *Pool) GetPoolLiquidity() []*v1beta1.Coin {
	if x != nil {
		return x.PoolLiquidity
	}
	return nil
}

func (x *Pool) GetScalingFactors() []uint64 {
	if x != nil {
		return x.ScalingFactors
	}
	return nil
}

func (x *Pool) GetScalingFactorController() string {
	if x != nil {
		return x.ScalingFactorController
	}
	return ""
}

var File_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto protoreflect.FileDescriptor

var file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDesc = []byte{
	0x0a, 0x39, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x67, 0x61, 0x6d, 0x6d, 0x2f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x77, 0x61, 0x70, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x69, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x6d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x01, 0x0a, 0x0a, 0x50, 0x6f,
	0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x22, 0x52, 0x07, 0x73,
	0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x12, 0x5c, 0x0a, 0x08, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x66,
	0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x22, 0x52, 0x07, 0x65, 0x78, 0x69,
	0x74, 0x46, 0x65, 0x65, 0x22, 0xab, 0x05, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2c, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xf2, 0xde, 0x1f, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x7e, 0x0a, 0x0b, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x6d, 0x2e,
	0x70, 0x6f, 0x6f, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x25, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde,
	0x1f, 0x1d, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x52,
	0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x51, 0x0a, 0x14, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xf2, 0xde, 0x1f, 0x1b, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x22, 0x52, 0x12, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x12, 0x59,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x22, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x72, 0x0a, 0x0e, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde,
	0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0d,
	0x70, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a,
	0x0f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x52, 0x0e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x60, 0x0a,
	0x19, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xf2, 0xde, 0x1f, 0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0x52, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x3a,
	0x11, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0xca, 0xb4, 0x2d, 0x05, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x42, 0xda, 0x02, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x67, 0x61, 0x6d, 0x6d, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x13, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61,
	0x70, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x67, 0x61, 0x6d, 0x6d, 0x2f, 0x70, 0x6f, 0x6f, 0x6c,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77,
	0x61, 0x70, 0x3b, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x04, 0x4f, 0x47, 0x50, 0x53, 0xaa, 0x02, 0x2a, 0x4f, 0x73,
	0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x61, 0x6d, 0x6d, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70,
	0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xca, 0x02, 0x2a, 0x4f, 0x73, 0x6d, 0x6f, 0x73,
	0x69, 0x73, 0x5c, 0x47, 0x61, 0x6d, 0x6d, 0x5c, 0x50, 0x6f, 0x6f, 0x6c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x5c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x5c, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x36, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x5c,
	0x47, 0x61, 0x6d, 0x6d, 0x5c, 0x50, 0x6f, 0x6f, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x5c,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x2e, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x3a, 0x3a, 0x47, 0x61, 0x6d, 0x6d, 0x3a, 0x3a,
	0x50, 0x6f, 0x6f, 0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x77, 0x61, 0x70, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDescOnce sync.Once
	file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDescData = file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDesc
)

func file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDescGZIP() []byte {
	file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDescOnce.Do(func() {
		file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDescData)
	})
	return file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDescData
}

var file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_goTypes = []interface{}{
	(*PoolParams)(nil),   // 0: osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams
	(*Pool)(nil),         // 1: osmosis.gamm.poolmodels.stableswap.v1beta1.Pool
	(*v1beta1.Coin)(nil), // 2: cosmos.base.v1beta1.Coin
}
var file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_depIdxs = []int32{
	0, // 0: osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_params:type_name -> osmosis.gamm.poolmodels.stableswap.v1beta1.PoolParams
	2, // 1: osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.total_shares:type_name -> cosmos.base.v1beta1.Coin
	2, // 2: osmosis.gamm.poolmodels.stableswap.v1beta1.Pool.pool_liquidity:type_name -> cosmos.base.v1beta1.Coin
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_init() }
func file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_init() {
	if File_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_goTypes,
		DependencyIndexes: file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_depIdxs,
		MessageInfos:      file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_msgTypes,
	}.Build()
	File_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto = out.File
	file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_rawDesc = nil
	file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_goTypes = nil
	file_osmosis_gamm_pool_models_stableswap_stableswap_pool_proto_depIdxs = nil
}
