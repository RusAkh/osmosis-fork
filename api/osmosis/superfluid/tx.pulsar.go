// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package superfluid

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_MsgSuperfluidDelegate          protoreflect.MessageDescriptor
	fd_MsgSuperfluidDelegate_sender   protoreflect.FieldDescriptor
	fd_MsgSuperfluidDelegate_lock_id  protoreflect.FieldDescriptor
	fd_MsgSuperfluidDelegate_val_addr protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_tx_proto_init()
	md_MsgSuperfluidDelegate = File_osmosis_superfluid_tx_proto.Messages().ByName("MsgSuperfluidDelegate")
	fd_MsgSuperfluidDelegate_sender = md_MsgSuperfluidDelegate.Fields().ByName("sender")
	fd_MsgSuperfluidDelegate_lock_id = md_MsgSuperfluidDelegate.Fields().ByName("lock_id")
	fd_MsgSuperfluidDelegate_val_addr = md_MsgSuperfluidDelegate.Fields().ByName("val_addr")
}

var _ protoreflect.Message = (*fastReflection_MsgSuperfluidDelegate)(nil)

type fastReflection_MsgSuperfluidDelegate MsgSuperfluidDelegate

func (x *MsgSuperfluidDelegate) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidDelegate)(x)
}

func (x *MsgSuperfluidDelegate) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_tx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgSuperfluidDelegate_messageType fastReflection_MsgSuperfluidDelegate_messageType
var _ protoreflect.MessageType = fastReflection_MsgSuperfluidDelegate_messageType{}

type fastReflection_MsgSuperfluidDelegate_messageType struct{}

func (x fastReflection_MsgSuperfluidDelegate_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidDelegate)(nil)
}
func (x fastReflection_MsgSuperfluidDelegate_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidDelegate)
}
func (x fastReflection_MsgSuperfluidDelegate_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidDelegate
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgSuperfluidDelegate) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidDelegate
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgSuperfluidDelegate) Type() protoreflect.MessageType {
	return _fastReflection_MsgSuperfluidDelegate_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgSuperfluidDelegate) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidDelegate)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgSuperfluidDelegate) Interface() protoreflect.ProtoMessage {
	return (*MsgSuperfluidDelegate)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgSuperfluidDelegate) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_MsgSuperfluidDelegate_sender, value) {
			return
		}
	}
	if x.LockId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LockId)
		if !f(fd_MsgSuperfluidDelegate_lock_id, value) {
			return
		}
	}
	if x.ValAddr != "" {
		value := protoreflect.ValueOfString(x.ValAddr)
		if !f(fd_MsgSuperfluidDelegate_val_addr, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgSuperfluidDelegate) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidDelegate.sender":
		return x.Sender != ""
	case "osmosis.superfluid.MsgSuperfluidDelegate.lock_id":
		return x.LockId != uint64(0)
	case "osmosis.superfluid.MsgSuperfluidDelegate.val_addr":
		return x.ValAddr != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegate does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidDelegate) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidDelegate.sender":
		x.Sender = ""
	case "osmosis.superfluid.MsgSuperfluidDelegate.lock_id":
		x.LockId = uint64(0)
	case "osmosis.superfluid.MsgSuperfluidDelegate.val_addr":
		x.ValAddr = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegate does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgSuperfluidDelegate) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.MsgSuperfluidDelegate.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.MsgSuperfluidDelegate.lock_id":
		value := x.LockId
		return protoreflect.ValueOfUint64(value)
	case "osmosis.superfluid.MsgSuperfluidDelegate.val_addr":
		value := x.ValAddr
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegate does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidDelegate) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidDelegate.sender":
		x.Sender = value.Interface().(string)
	case "osmosis.superfluid.MsgSuperfluidDelegate.lock_id":
		x.LockId = value.Uint()
	case "osmosis.superfluid.MsgSuperfluidDelegate.val_addr":
		x.ValAddr = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegate does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidDelegate) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidDelegate.sender":
		panic(fmt.Errorf("field sender of message osmosis.superfluid.MsgSuperfluidDelegate is not mutable"))
	case "osmosis.superfluid.MsgSuperfluidDelegate.lock_id":
		panic(fmt.Errorf("field lock_id of message osmosis.superfluid.MsgSuperfluidDelegate is not mutable"))
	case "osmosis.superfluid.MsgSuperfluidDelegate.val_addr":
		panic(fmt.Errorf("field val_addr of message osmosis.superfluid.MsgSuperfluidDelegate is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegate does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgSuperfluidDelegate) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidDelegate.sender":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.MsgSuperfluidDelegate.lock_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "osmosis.superfluid.MsgSuperfluidDelegate.val_addr":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegate does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgSuperfluidDelegate) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.MsgSuperfluidDelegate", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgSuperfluidDelegate) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidDelegate) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgSuperfluidDelegate) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgSuperfluidDelegate) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgSuperfluidDelegate)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LockId != 0 {
			n += 1 + runtime.Sov(uint64(x.LockId))
		}
		l = len(x.ValAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidDelegate)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ValAddr) > 0 {
			i -= len(x.ValAddr)
			copy(dAtA[i:], x.ValAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValAddr)))
			i--
			dAtA[i] = 0x1a
		}
		if x.LockId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LockId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidDelegate)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidDelegate: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
				}
				x.LockId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LockId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgSuperfluidDelegateResponse protoreflect.MessageDescriptor
)

func init() {
	file_osmosis_superfluid_tx_proto_init()
	md_MsgSuperfluidDelegateResponse = File_osmosis_superfluid_tx_proto.Messages().ByName("MsgSuperfluidDelegateResponse")
}

var _ protoreflect.Message = (*fastReflection_MsgSuperfluidDelegateResponse)(nil)

type fastReflection_MsgSuperfluidDelegateResponse MsgSuperfluidDelegateResponse

func (x *MsgSuperfluidDelegateResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidDelegateResponse)(x)
}

func (x *MsgSuperfluidDelegateResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_tx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgSuperfluidDelegateResponse_messageType fastReflection_MsgSuperfluidDelegateResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgSuperfluidDelegateResponse_messageType{}

type fastReflection_MsgSuperfluidDelegateResponse_messageType struct{}

func (x fastReflection_MsgSuperfluidDelegateResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidDelegateResponse)(nil)
}
func (x fastReflection_MsgSuperfluidDelegateResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidDelegateResponse)
}
func (x fastReflection_MsgSuperfluidDelegateResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidDelegateResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgSuperfluidDelegateResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidDelegateResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgSuperfluidDelegateResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgSuperfluidDelegateResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgSuperfluidDelegateResponse) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidDelegateResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgSuperfluidDelegateResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgSuperfluidDelegateResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgSuperfluidDelegateResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgSuperfluidDelegateResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegateResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidDelegateResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegateResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgSuperfluidDelegateResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegateResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidDelegateResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegateResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidDelegateResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegateResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgSuperfluidDelegateResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidDelegateResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgSuperfluidDelegateResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.MsgSuperfluidDelegateResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgSuperfluidDelegateResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidDelegateResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgSuperfluidDelegateResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgSuperfluidDelegateResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgSuperfluidDelegateResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidDelegateResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidDelegateResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidDelegateResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidDelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgSuperfluidUndelegate         protoreflect.MessageDescriptor
	fd_MsgSuperfluidUndelegate_sender  protoreflect.FieldDescriptor
	fd_MsgSuperfluidUndelegate_lock_id protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_tx_proto_init()
	md_MsgSuperfluidUndelegate = File_osmosis_superfluid_tx_proto.Messages().ByName("MsgSuperfluidUndelegate")
	fd_MsgSuperfluidUndelegate_sender = md_MsgSuperfluidUndelegate.Fields().ByName("sender")
	fd_MsgSuperfluidUndelegate_lock_id = md_MsgSuperfluidUndelegate.Fields().ByName("lock_id")
}

var _ protoreflect.Message = (*fastReflection_MsgSuperfluidUndelegate)(nil)

type fastReflection_MsgSuperfluidUndelegate MsgSuperfluidUndelegate

func (x *MsgSuperfluidUndelegate) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidUndelegate)(x)
}

func (x *MsgSuperfluidUndelegate) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_tx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgSuperfluidUndelegate_messageType fastReflection_MsgSuperfluidUndelegate_messageType
var _ protoreflect.MessageType = fastReflection_MsgSuperfluidUndelegate_messageType{}

type fastReflection_MsgSuperfluidUndelegate_messageType struct{}

func (x fastReflection_MsgSuperfluidUndelegate_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidUndelegate)(nil)
}
func (x fastReflection_MsgSuperfluidUndelegate_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidUndelegate)
}
func (x fastReflection_MsgSuperfluidUndelegate_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidUndelegate
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgSuperfluidUndelegate) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidUndelegate
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgSuperfluidUndelegate) Type() protoreflect.MessageType {
	return _fastReflection_MsgSuperfluidUndelegate_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgSuperfluidUndelegate) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidUndelegate)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgSuperfluidUndelegate) Interface() protoreflect.ProtoMessage {
	return (*MsgSuperfluidUndelegate)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgSuperfluidUndelegate) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_MsgSuperfluidUndelegate_sender, value) {
			return
		}
	}
	if x.LockId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LockId)
		if !f(fd_MsgSuperfluidUndelegate_lock_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgSuperfluidUndelegate) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUndelegate.sender":
		return x.Sender != ""
	case "osmosis.superfluid.MsgSuperfluidUndelegate.lock_id":
		return x.LockId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegate does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUndelegate) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUndelegate.sender":
		x.Sender = ""
	case "osmosis.superfluid.MsgSuperfluidUndelegate.lock_id":
		x.LockId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegate does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgSuperfluidUndelegate) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUndelegate.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.MsgSuperfluidUndelegate.lock_id":
		value := x.LockId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegate does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUndelegate) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUndelegate.sender":
		x.Sender = value.Interface().(string)
	case "osmosis.superfluid.MsgSuperfluidUndelegate.lock_id":
		x.LockId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegate does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUndelegate) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUndelegate.sender":
		panic(fmt.Errorf("field sender of message osmosis.superfluid.MsgSuperfluidUndelegate is not mutable"))
	case "osmosis.superfluid.MsgSuperfluidUndelegate.lock_id":
		panic(fmt.Errorf("field lock_id of message osmosis.superfluid.MsgSuperfluidUndelegate is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegate does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgSuperfluidUndelegate) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUndelegate.sender":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.MsgSuperfluidUndelegate.lock_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegate does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgSuperfluidUndelegate) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.MsgSuperfluidUndelegate", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgSuperfluidUndelegate) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUndelegate) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgSuperfluidUndelegate) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgSuperfluidUndelegate) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgSuperfluidUndelegate)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LockId != 0 {
			n += 1 + runtime.Sov(uint64(x.LockId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidUndelegate)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LockId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LockId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidUndelegate)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidUndelegate: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidUndelegate: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
				}
				x.LockId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LockId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgSuperfluidUndelegateResponse protoreflect.MessageDescriptor
)

func init() {
	file_osmosis_superfluid_tx_proto_init()
	md_MsgSuperfluidUndelegateResponse = File_osmosis_superfluid_tx_proto.Messages().ByName("MsgSuperfluidUndelegateResponse")
}

var _ protoreflect.Message = (*fastReflection_MsgSuperfluidUndelegateResponse)(nil)

type fastReflection_MsgSuperfluidUndelegateResponse MsgSuperfluidUndelegateResponse

func (x *MsgSuperfluidUndelegateResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidUndelegateResponse)(x)
}

func (x *MsgSuperfluidUndelegateResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_tx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgSuperfluidUndelegateResponse_messageType fastReflection_MsgSuperfluidUndelegateResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgSuperfluidUndelegateResponse_messageType{}

type fastReflection_MsgSuperfluidUndelegateResponse_messageType struct{}

func (x fastReflection_MsgSuperfluidUndelegateResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidUndelegateResponse)(nil)
}
func (x fastReflection_MsgSuperfluidUndelegateResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidUndelegateResponse)
}
func (x fastReflection_MsgSuperfluidUndelegateResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidUndelegateResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidUndelegateResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgSuperfluidUndelegateResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidUndelegateResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgSuperfluidUndelegateResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegateResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegateResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegateResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegateResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegateResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUndelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUndelegateResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.MsgSuperfluidUndelegateResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgSuperfluidUndelegateResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgSuperfluidUndelegateResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidUndelegateResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidUndelegateResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidUndelegateResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidUndelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgSuperfluidUnbondLock         protoreflect.MessageDescriptor
	fd_MsgSuperfluidUnbondLock_sender  protoreflect.FieldDescriptor
	fd_MsgSuperfluidUnbondLock_lock_id protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_tx_proto_init()
	md_MsgSuperfluidUnbondLock = File_osmosis_superfluid_tx_proto.Messages().ByName("MsgSuperfluidUnbondLock")
	fd_MsgSuperfluidUnbondLock_sender = md_MsgSuperfluidUnbondLock.Fields().ByName("sender")
	fd_MsgSuperfluidUnbondLock_lock_id = md_MsgSuperfluidUnbondLock.Fields().ByName("lock_id")
}

var _ protoreflect.Message = (*fastReflection_MsgSuperfluidUnbondLock)(nil)

type fastReflection_MsgSuperfluidUnbondLock MsgSuperfluidUnbondLock

func (x *MsgSuperfluidUnbondLock) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidUnbondLock)(x)
}

func (x *MsgSuperfluidUnbondLock) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_tx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgSuperfluidUnbondLock_messageType fastReflection_MsgSuperfluidUnbondLock_messageType
var _ protoreflect.MessageType = fastReflection_MsgSuperfluidUnbondLock_messageType{}

type fastReflection_MsgSuperfluidUnbondLock_messageType struct{}

func (x fastReflection_MsgSuperfluidUnbondLock_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidUnbondLock)(nil)
}
func (x fastReflection_MsgSuperfluidUnbondLock_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidUnbondLock)
}
func (x fastReflection_MsgSuperfluidUnbondLock_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidUnbondLock
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgSuperfluidUnbondLock) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidUnbondLock
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgSuperfluidUnbondLock) Type() protoreflect.MessageType {
	return _fastReflection_MsgSuperfluidUnbondLock_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgSuperfluidUnbondLock) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidUnbondLock)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgSuperfluidUnbondLock) Interface() protoreflect.ProtoMessage {
	return (*MsgSuperfluidUnbondLock)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgSuperfluidUnbondLock) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_MsgSuperfluidUnbondLock_sender, value) {
			return
		}
	}
	if x.LockId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LockId)
		if !f(fd_MsgSuperfluidUnbondLock_lock_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgSuperfluidUnbondLock) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.sender":
		return x.Sender != ""
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.lock_id":
		return x.LockId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLock"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLock does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUnbondLock) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.sender":
		x.Sender = ""
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.lock_id":
		x.LockId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLock"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLock does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgSuperfluidUnbondLock) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.lock_id":
		value := x.LockId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLock"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLock does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUnbondLock) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.sender":
		x.Sender = value.Interface().(string)
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.lock_id":
		x.LockId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLock"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLock does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUnbondLock) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.sender":
		panic(fmt.Errorf("field sender of message osmosis.superfluid.MsgSuperfluidUnbondLock is not mutable"))
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.lock_id":
		panic(fmt.Errorf("field lock_id of message osmosis.superfluid.MsgSuperfluidUnbondLock is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLock"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLock does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgSuperfluidUnbondLock) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.sender":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.MsgSuperfluidUnbondLock.lock_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLock"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLock does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgSuperfluidUnbondLock) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.MsgSuperfluidUnbondLock", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgSuperfluidUnbondLock) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUnbondLock) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgSuperfluidUnbondLock) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgSuperfluidUnbondLock) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgSuperfluidUnbondLock)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LockId != 0 {
			n += 1 + runtime.Sov(uint64(x.LockId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidUnbondLock)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LockId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LockId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidUnbondLock)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidUnbondLock: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidUnbondLock: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
				}
				x.LockId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LockId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgSuperfluidUnbondLockResponse protoreflect.MessageDescriptor
)

func init() {
	file_osmosis_superfluid_tx_proto_init()
	md_MsgSuperfluidUnbondLockResponse = File_osmosis_superfluid_tx_proto.Messages().ByName("MsgSuperfluidUnbondLockResponse")
}

var _ protoreflect.Message = (*fastReflection_MsgSuperfluidUnbondLockResponse)(nil)

type fastReflection_MsgSuperfluidUnbondLockResponse MsgSuperfluidUnbondLockResponse

func (x *MsgSuperfluidUnbondLockResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidUnbondLockResponse)(x)
}

func (x *MsgSuperfluidUnbondLockResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_tx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgSuperfluidUnbondLockResponse_messageType fastReflection_MsgSuperfluidUnbondLockResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgSuperfluidUnbondLockResponse_messageType{}

type fastReflection_MsgSuperfluidUnbondLockResponse_messageType struct{}

func (x fastReflection_MsgSuperfluidUnbondLockResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgSuperfluidUnbondLockResponse)(nil)
}
func (x fastReflection_MsgSuperfluidUnbondLockResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidUnbondLockResponse)
}
func (x fastReflection_MsgSuperfluidUnbondLockResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidUnbondLockResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgSuperfluidUnbondLockResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgSuperfluidUnbondLockResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) New() protoreflect.Message {
	return new(fastReflection_MsgSuperfluidUnbondLockResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgSuperfluidUnbondLockResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLockResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLockResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLockResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLockResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLockResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLockResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLockResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLockResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLockResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLockResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgSuperfluidUnbondLockResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgSuperfluidUnbondLockResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.MsgSuperfluidUnbondLockResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgSuperfluidUnbondLockResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgSuperfluidUnbondLockResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidUnbondLockResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgSuperfluidUnbondLockResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidUnbondLockResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgSuperfluidUnbondLockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MsgLockAndSuperfluidDelegate_2_list)(nil)

type _MsgLockAndSuperfluidDelegate_2_list struct {
	list *[]*v1beta1.Coin
}

func (x *_MsgLockAndSuperfluidDelegate_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgLockAndSuperfluidDelegate_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_MsgLockAndSuperfluidDelegate_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_MsgLockAndSuperfluidDelegate_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgLockAndSuperfluidDelegate_2_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgLockAndSuperfluidDelegate_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_MsgLockAndSuperfluidDelegate_2_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_MsgLockAndSuperfluidDelegate_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgLockAndSuperfluidDelegate          protoreflect.MessageDescriptor
	fd_MsgLockAndSuperfluidDelegate_sender   protoreflect.FieldDescriptor
	fd_MsgLockAndSuperfluidDelegate_coins    protoreflect.FieldDescriptor
	fd_MsgLockAndSuperfluidDelegate_val_addr protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_tx_proto_init()
	md_MsgLockAndSuperfluidDelegate = File_osmosis_superfluid_tx_proto.Messages().ByName("MsgLockAndSuperfluidDelegate")
	fd_MsgLockAndSuperfluidDelegate_sender = md_MsgLockAndSuperfluidDelegate.Fields().ByName("sender")
	fd_MsgLockAndSuperfluidDelegate_coins = md_MsgLockAndSuperfluidDelegate.Fields().ByName("coins")
	fd_MsgLockAndSuperfluidDelegate_val_addr = md_MsgLockAndSuperfluidDelegate.Fields().ByName("val_addr")
}

var _ protoreflect.Message = (*fastReflection_MsgLockAndSuperfluidDelegate)(nil)

type fastReflection_MsgLockAndSuperfluidDelegate MsgLockAndSuperfluidDelegate

func (x *MsgLockAndSuperfluidDelegate) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgLockAndSuperfluidDelegate)(x)
}

func (x *MsgLockAndSuperfluidDelegate) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_tx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgLockAndSuperfluidDelegate_messageType fastReflection_MsgLockAndSuperfluidDelegate_messageType
var _ protoreflect.MessageType = fastReflection_MsgLockAndSuperfluidDelegate_messageType{}

type fastReflection_MsgLockAndSuperfluidDelegate_messageType struct{}

func (x fastReflection_MsgLockAndSuperfluidDelegate_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgLockAndSuperfluidDelegate)(nil)
}
func (x fastReflection_MsgLockAndSuperfluidDelegate_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgLockAndSuperfluidDelegate)
}
func (x fastReflection_MsgLockAndSuperfluidDelegate_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgLockAndSuperfluidDelegate
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgLockAndSuperfluidDelegate
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) Type() protoreflect.MessageType {
	return _fastReflection_MsgLockAndSuperfluidDelegate_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) New() protoreflect.Message {
	return new(fastReflection_MsgLockAndSuperfluidDelegate)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) Interface() protoreflect.ProtoMessage {
	return (*MsgLockAndSuperfluidDelegate)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_MsgLockAndSuperfluidDelegate_sender, value) {
			return
		}
	}
	if len(x.Coins) != 0 {
		value := protoreflect.ValueOfList(&_MsgLockAndSuperfluidDelegate_2_list{list: &x.Coins})
		if !f(fd_MsgLockAndSuperfluidDelegate_coins, value) {
			return
		}
	}
	if x.ValAddr != "" {
		value := protoreflect.ValueOfString(x.ValAddr)
		if !f(fd_MsgLockAndSuperfluidDelegate_val_addr, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.sender":
		return x.Sender != ""
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.coins":
		return len(x.Coins) != 0
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.val_addr":
		return x.ValAddr != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegate does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.sender":
		x.Sender = ""
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.coins":
		x.Coins = nil
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.val_addr":
		x.ValAddr = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegate does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.coins":
		if len(x.Coins) == 0 {
			return protoreflect.ValueOfList(&_MsgLockAndSuperfluidDelegate_2_list{})
		}
		listValue := &_MsgLockAndSuperfluidDelegate_2_list{list: &x.Coins}
		return protoreflect.ValueOfList(listValue)
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.val_addr":
		value := x.ValAddr
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegate does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.sender":
		x.Sender = value.Interface().(string)
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.coins":
		lv := value.List()
		clv := lv.(*_MsgLockAndSuperfluidDelegate_2_list)
		x.Coins = *clv.list
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.val_addr":
		x.ValAddr = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegate does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.coins":
		if x.Coins == nil {
			x.Coins = []*v1beta1.Coin{}
		}
		value := &_MsgLockAndSuperfluidDelegate_2_list{list: &x.Coins}
		return protoreflect.ValueOfList(value)
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.sender":
		panic(fmt.Errorf("field sender of message osmosis.superfluid.MsgLockAndSuperfluidDelegate is not mutable"))
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.val_addr":
		panic(fmt.Errorf("field val_addr of message osmosis.superfluid.MsgLockAndSuperfluidDelegate is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegate does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.sender":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.coins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_MsgLockAndSuperfluidDelegate_2_list{list: &list})
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegate.val_addr":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegate"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegate does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.MsgLockAndSuperfluidDelegate", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgLockAndSuperfluidDelegate) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgLockAndSuperfluidDelegate)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Coins) > 0 {
			for _, e := range x.Coins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.ValAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgLockAndSuperfluidDelegate)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ValAddr) > 0 {
			i -= len(x.ValAddr)
			copy(dAtA[i:], x.ValAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValAddr)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Coins) > 0 {
			for iNdEx := len(x.Coins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Coins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgLockAndSuperfluidDelegate)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgLockAndSuperfluidDelegate: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgLockAndSuperfluidDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Coins = append(x.Coins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Coins[len(x.Coins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgLockAndSuperfluidDelegateResponse    protoreflect.MessageDescriptor
	fd_MsgLockAndSuperfluidDelegateResponse_ID protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_tx_proto_init()
	md_MsgLockAndSuperfluidDelegateResponse = File_osmosis_superfluid_tx_proto.Messages().ByName("MsgLockAndSuperfluidDelegateResponse")
	fd_MsgLockAndSuperfluidDelegateResponse_ID = md_MsgLockAndSuperfluidDelegateResponse.Fields().ByName("ID")
}

var _ protoreflect.Message = (*fastReflection_MsgLockAndSuperfluidDelegateResponse)(nil)

type fastReflection_MsgLockAndSuperfluidDelegateResponse MsgLockAndSuperfluidDelegateResponse

func (x *MsgLockAndSuperfluidDelegateResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgLockAndSuperfluidDelegateResponse)(x)
}

func (x *MsgLockAndSuperfluidDelegateResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_tx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgLockAndSuperfluidDelegateResponse_messageType fastReflection_MsgLockAndSuperfluidDelegateResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgLockAndSuperfluidDelegateResponse_messageType{}

type fastReflection_MsgLockAndSuperfluidDelegateResponse_messageType struct{}

func (x fastReflection_MsgLockAndSuperfluidDelegateResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgLockAndSuperfluidDelegateResponse)(nil)
}
func (x fastReflection_MsgLockAndSuperfluidDelegateResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgLockAndSuperfluidDelegateResponse)
}
func (x fastReflection_MsgLockAndSuperfluidDelegateResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgLockAndSuperfluidDelegateResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgLockAndSuperfluidDelegateResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgLockAndSuperfluidDelegateResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) New() protoreflect.Message {
	return new(fastReflection_MsgLockAndSuperfluidDelegateResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgLockAndSuperfluidDelegateResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ID != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ID)
		if !f(fd_MsgLockAndSuperfluidDelegateResponse_ID, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse.ID":
		return x.ID != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse.ID":
		x.ID = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse.ID":
		value := x.ID
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse.ID":
		x.ID = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse.ID":
		panic(fmt.Errorf("field ID of message osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse.ID":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgLockAndSuperfluidDelegateResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgLockAndSuperfluidDelegateResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ID != 0 {
			n += 1 + runtime.Sov(uint64(x.ID))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgLockAndSuperfluidDelegateResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ID != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ID))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgLockAndSuperfluidDelegateResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgLockAndSuperfluidDelegateResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgLockAndSuperfluidDelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
				}
				x.ID = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ID |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MsgUnPoolWhitelistedPool         protoreflect.MessageDescriptor
	fd_MsgUnPoolWhitelistedPool_sender  protoreflect.FieldDescriptor
	fd_MsgUnPoolWhitelistedPool_pool_id protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_tx_proto_init()
	md_MsgUnPoolWhitelistedPool = File_osmosis_superfluid_tx_proto.Messages().ByName("MsgUnPoolWhitelistedPool")
	fd_MsgUnPoolWhitelistedPool_sender = md_MsgUnPoolWhitelistedPool.Fields().ByName("sender")
	fd_MsgUnPoolWhitelistedPool_pool_id = md_MsgUnPoolWhitelistedPool.Fields().ByName("pool_id")
}

var _ protoreflect.Message = (*fastReflection_MsgUnPoolWhitelistedPool)(nil)

type fastReflection_MsgUnPoolWhitelistedPool MsgUnPoolWhitelistedPool

func (x *MsgUnPoolWhitelistedPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgUnPoolWhitelistedPool)(x)
}

func (x *MsgUnPoolWhitelistedPool) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_tx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgUnPoolWhitelistedPool_messageType fastReflection_MsgUnPoolWhitelistedPool_messageType
var _ protoreflect.MessageType = fastReflection_MsgUnPoolWhitelistedPool_messageType{}

type fastReflection_MsgUnPoolWhitelistedPool_messageType struct{}

func (x fastReflection_MsgUnPoolWhitelistedPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgUnPoolWhitelistedPool)(nil)
}
func (x fastReflection_MsgUnPoolWhitelistedPool_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgUnPoolWhitelistedPool)
}
func (x fastReflection_MsgUnPoolWhitelistedPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUnPoolWhitelistedPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgUnPoolWhitelistedPool) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUnPoolWhitelistedPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgUnPoolWhitelistedPool) Type() protoreflect.MessageType {
	return _fastReflection_MsgUnPoolWhitelistedPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgUnPoolWhitelistedPool) New() protoreflect.Message {
	return new(fastReflection_MsgUnPoolWhitelistedPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgUnPoolWhitelistedPool) Interface() protoreflect.ProtoMessage {
	return (*MsgUnPoolWhitelistedPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgUnPoolWhitelistedPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_MsgUnPoolWhitelistedPool_sender, value) {
			return
		}
	}
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_MsgUnPoolWhitelistedPool_pool_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgUnPoolWhitelistedPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.sender":
		return x.Sender != ""
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.pool_id":
		return x.PoolId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPool"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUnPoolWhitelistedPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.sender":
		x.Sender = ""
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.pool_id":
		x.PoolId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPool"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgUnPoolWhitelistedPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPool"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUnPoolWhitelistedPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.sender":
		x.Sender = value.Interface().(string)
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.pool_id":
		x.PoolId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPool"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUnPoolWhitelistedPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.sender":
		panic(fmt.Errorf("field sender of message osmosis.superfluid.MsgUnPoolWhitelistedPool is not mutable"))
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.pool_id":
		panic(fmt.Errorf("field pool_id of message osmosis.superfluid.MsgUnPoolWhitelistedPool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPool"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgUnPoolWhitelistedPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.sender":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.MsgUnPoolWhitelistedPool.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPool"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgUnPoolWhitelistedPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.MsgUnPoolWhitelistedPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgUnPoolWhitelistedPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUnPoolWhitelistedPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgUnPoolWhitelistedPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgUnPoolWhitelistedPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgUnPoolWhitelistedPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgUnPoolWhitelistedPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgUnPoolWhitelistedPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUnPoolWhitelistedPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUnPoolWhitelistedPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_MsgUnPoolWhitelistedPoolResponse_1_list)(nil)

type _MsgUnPoolWhitelistedPoolResponse_1_list struct {
	list *[]uint64
}

func (x *_MsgUnPoolWhitelistedPoolResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_MsgUnPoolWhitelistedPoolResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_MsgUnPoolWhitelistedPoolResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_MsgUnPoolWhitelistedPoolResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_MsgUnPoolWhitelistedPoolResponse_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message MsgUnPoolWhitelistedPoolResponse at list field ExitedLockIds as it is not of Message kind"))
}

func (x *_MsgUnPoolWhitelistedPoolResponse_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_MsgUnPoolWhitelistedPoolResponse_1_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_MsgUnPoolWhitelistedPoolResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_MsgUnPoolWhitelistedPoolResponse                 protoreflect.MessageDescriptor
	fd_MsgUnPoolWhitelistedPoolResponse_exited_lock_ids protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_tx_proto_init()
	md_MsgUnPoolWhitelistedPoolResponse = File_osmosis_superfluid_tx_proto.Messages().ByName("MsgUnPoolWhitelistedPoolResponse")
	fd_MsgUnPoolWhitelistedPoolResponse_exited_lock_ids = md_MsgUnPoolWhitelistedPoolResponse.Fields().ByName("exited_lock_ids")
}

var _ protoreflect.Message = (*fastReflection_MsgUnPoolWhitelistedPoolResponse)(nil)

type fastReflection_MsgUnPoolWhitelistedPoolResponse MsgUnPoolWhitelistedPoolResponse

func (x *MsgUnPoolWhitelistedPoolResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MsgUnPoolWhitelistedPoolResponse)(x)
}

func (x *MsgUnPoolWhitelistedPoolResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_tx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MsgUnPoolWhitelistedPoolResponse_messageType fastReflection_MsgUnPoolWhitelistedPoolResponse_messageType
var _ protoreflect.MessageType = fastReflection_MsgUnPoolWhitelistedPoolResponse_messageType{}

type fastReflection_MsgUnPoolWhitelistedPoolResponse_messageType struct{}

func (x fastReflection_MsgUnPoolWhitelistedPoolResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MsgUnPoolWhitelistedPoolResponse)(nil)
}
func (x fastReflection_MsgUnPoolWhitelistedPoolResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_MsgUnPoolWhitelistedPoolResponse)
}
func (x fastReflection_MsgUnPoolWhitelistedPoolResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUnPoolWhitelistedPoolResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_MsgUnPoolWhitelistedPoolResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) Type() protoreflect.MessageType {
	return _fastReflection_MsgUnPoolWhitelistedPoolResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) New() protoreflect.Message {
	return new(fastReflection_MsgUnPoolWhitelistedPoolResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) Interface() protoreflect.ProtoMessage {
	return (*MsgUnPoolWhitelistedPoolResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.ExitedLockIds) != 0 {
		value := protoreflect.ValueOfList(&_MsgUnPoolWhitelistedPoolResponse_1_list{list: &x.ExitedLockIds})
		if !f(fd_MsgUnPoolWhitelistedPoolResponse_exited_lock_ids, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse.exited_lock_ids":
		return len(x.ExitedLockIds) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse.exited_lock_ids":
		x.ExitedLockIds = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse.exited_lock_ids":
		if len(x.ExitedLockIds) == 0 {
			return protoreflect.ValueOfList(&_MsgUnPoolWhitelistedPoolResponse_1_list{})
		}
		listValue := &_MsgUnPoolWhitelistedPoolResponse_1_list{list: &x.ExitedLockIds}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse.exited_lock_ids":
		lv := value.List()
		clv := lv.(*_MsgUnPoolWhitelistedPoolResponse_1_list)
		x.ExitedLockIds = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse.exited_lock_ids":
		if x.ExitedLockIds == nil {
			x.ExitedLockIds = []uint64{}
		}
		value := &_MsgUnPoolWhitelistedPoolResponse_1_list{list: &x.ExitedLockIds}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse.exited_lock_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_MsgUnPoolWhitelistedPoolResponse_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MsgUnPoolWhitelistedPoolResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MsgUnPoolWhitelistedPoolResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.ExitedLockIds) > 0 {
			l = 0
			for _, e := range x.ExitedLockIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MsgUnPoolWhitelistedPoolResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ExitedLockIds) > 0 {
			var pksize2 int
			for _, num := range x.ExitedLockIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.ExitedLockIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MsgUnPoolWhitelistedPoolResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUnPoolWhitelistedPoolResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MsgUnPoolWhitelistedPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ExitedLockIds = append(x.ExitedLockIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.ExitedLockIds) == 0 {
						x.ExitedLockIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ExitedLockIds = append(x.ExitedLockIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExitedLockIds", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: osmosis/superfluid/tx.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MsgSuperfluidDelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender  string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	LockId  uint64 `protobuf:"varint,2,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	ValAddr string `protobuf:"bytes,3,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
}

func (x *MsgSuperfluidDelegate) Reset() {
	*x = MsgSuperfluidDelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_tx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSuperfluidDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSuperfluidDelegate) ProtoMessage() {}

// Deprecated: Use MsgSuperfluidDelegate.ProtoReflect.Descriptor instead.
func (*MsgSuperfluidDelegate) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_tx_proto_rawDescGZIP(), []int{0}
}

func (x *MsgSuperfluidDelegate) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *MsgSuperfluidDelegate) GetLockId() uint64 {
	if x != nil {
		return x.LockId
	}
	return 0
}

func (x *MsgSuperfluidDelegate) GetValAddr() string {
	if x != nil {
		return x.ValAddr
	}
	return ""
}

type MsgSuperfluidDelegateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgSuperfluidDelegateResponse) Reset() {
	*x = MsgSuperfluidDelegateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_tx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSuperfluidDelegateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSuperfluidDelegateResponse) ProtoMessage() {}

// Deprecated: Use MsgSuperfluidDelegateResponse.ProtoReflect.Descriptor instead.
func (*MsgSuperfluidDelegateResponse) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_tx_proto_rawDescGZIP(), []int{1}
}

type MsgSuperfluidUndelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	LockId uint64 `protobuf:"varint,2,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (x *MsgSuperfluidUndelegate) Reset() {
	*x = MsgSuperfluidUndelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_tx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSuperfluidUndelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSuperfluidUndelegate) ProtoMessage() {}

// Deprecated: Use MsgSuperfluidUndelegate.ProtoReflect.Descriptor instead.
func (*MsgSuperfluidUndelegate) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_tx_proto_rawDescGZIP(), []int{2}
}

func (x *MsgSuperfluidUndelegate) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *MsgSuperfluidUndelegate) GetLockId() uint64 {
	if x != nil {
		return x.LockId
	}
	return 0
}

type MsgSuperfluidUndelegateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgSuperfluidUndelegateResponse) Reset() {
	*x = MsgSuperfluidUndelegateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_tx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSuperfluidUndelegateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSuperfluidUndelegateResponse) ProtoMessage() {}

// Deprecated: Use MsgSuperfluidUndelegateResponse.ProtoReflect.Descriptor instead.
func (*MsgSuperfluidUndelegateResponse) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_tx_proto_rawDescGZIP(), []int{3}
}

type MsgSuperfluidUnbondLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	LockId uint64 `protobuf:"varint,2,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (x *MsgSuperfluidUnbondLock) Reset() {
	*x = MsgSuperfluidUnbondLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_tx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSuperfluidUnbondLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSuperfluidUnbondLock) ProtoMessage() {}

// Deprecated: Use MsgSuperfluidUnbondLock.ProtoReflect.Descriptor instead.
func (*MsgSuperfluidUnbondLock) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_tx_proto_rawDescGZIP(), []int{4}
}

func (x *MsgSuperfluidUnbondLock) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *MsgSuperfluidUnbondLock) GetLockId() uint64 {
	if x != nil {
		return x.LockId
	}
	return 0
}

type MsgSuperfluidUnbondLockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgSuperfluidUnbondLockResponse) Reset() {
	*x = MsgSuperfluidUnbondLockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_tx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgSuperfluidUnbondLockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgSuperfluidUnbondLockResponse) ProtoMessage() {}

// Deprecated: Use MsgSuperfluidUnbondLockResponse.ProtoReflect.Descriptor instead.
func (*MsgSuperfluidUnbondLockResponse) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_tx_proto_rawDescGZIP(), []int{5}
}

// MsgLockAndSuperfluidDelegate locks coins with the unbonding period duration,
// and then does a superfluid lock from the newly created lockup, to the
// specified validator addr.
type MsgLockAndSuperfluidDelegate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender  string          `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Coins   []*v1beta1.Coin `protobuf:"bytes,2,rep,name=coins,proto3" json:"coins,omitempty"`
	ValAddr string          `protobuf:"bytes,3,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
}

func (x *MsgLockAndSuperfluidDelegate) Reset() {
	*x = MsgLockAndSuperfluidDelegate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_tx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgLockAndSuperfluidDelegate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgLockAndSuperfluidDelegate) ProtoMessage() {}

// Deprecated: Use MsgLockAndSuperfluidDelegate.ProtoReflect.Descriptor instead.
func (*MsgLockAndSuperfluidDelegate) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_tx_proto_rawDescGZIP(), []int{6}
}

func (x *MsgLockAndSuperfluidDelegate) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *MsgLockAndSuperfluidDelegate) GetCoins() []*v1beta1.Coin {
	if x != nil {
		return x.Coins
	}
	return nil
}

func (x *MsgLockAndSuperfluidDelegate) GetValAddr() string {
	if x != nil {
		return x.ValAddr
	}
	return ""
}

type MsgLockAndSuperfluidDelegateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *MsgLockAndSuperfluidDelegateResponse) Reset() {
	*x = MsgLockAndSuperfluidDelegateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_tx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgLockAndSuperfluidDelegateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgLockAndSuperfluidDelegateResponse) ProtoMessage() {}

// Deprecated: Use MsgLockAndSuperfluidDelegateResponse.ProtoReflect.Descriptor instead.
func (*MsgLockAndSuperfluidDelegateResponse) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_tx_proto_rawDescGZIP(), []int{7}
}

func (x *MsgLockAndSuperfluidDelegateResponse) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

// MsgUnPoolWhitelistedPool Unpools every lock the sender has, that is
// associated with pool pool_id. If pool_id is not approved for unpooling by
// governance, this is a no-op. Unpooling takes the locked gamm shares, and runs
// "ExitPool" on it, to get the constituent tokens. e.g. z gamm/pool/1 tokens
// ExitPools into constituent tokens x uatom, y uosmo. Then it creates a new
// lock for every constituent token, with the duration associated with the lock.
// If the lock was unbonding, the new lockup durations should be the time left
// until unbond completion.
type MsgUnPoolWhitelistedPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (x *MsgUnPoolWhitelistedPool) Reset() {
	*x = MsgUnPoolWhitelistedPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_tx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUnPoolWhitelistedPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUnPoolWhitelistedPool) ProtoMessage() {}

// Deprecated: Use MsgUnPoolWhitelistedPool.ProtoReflect.Descriptor instead.
func (*MsgUnPoolWhitelistedPool) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_tx_proto_rawDescGZIP(), []int{8}
}

func (x *MsgUnPoolWhitelistedPool) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *MsgUnPoolWhitelistedPool) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

type MsgUnPoolWhitelistedPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitedLockIds []uint64 `protobuf:"varint,1,rep,packed,name=exited_lock_ids,json=exitedLockIds,proto3" json:"exited_lock_ids,omitempty"`
}

func (x *MsgUnPoolWhitelistedPoolResponse) Reset() {
	*x = MsgUnPoolWhitelistedPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_tx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUnPoolWhitelistedPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUnPoolWhitelistedPoolResponse) ProtoMessage() {}

// Deprecated: Use MsgUnPoolWhitelistedPoolResponse.ProtoReflect.Descriptor instead.
func (*MsgUnPoolWhitelistedPoolResponse) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_tx_proto_rawDescGZIP(), []int{9}
}

func (x *MsgUnPoolWhitelistedPoolResponse) GetExitedLockIds() []uint64 {
	if x != nil {
		return x.ExitedLockIds
	}
	return nil
}

var File_osmosis_superfluid_tx_proto protoreflect.FileDescriptor

var file_osmosis_superfluid_tx_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66,
	0x6c, 0x75, 0x69, 0x64, 0x2f, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69,
	0x64, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73,
	0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x2f, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x15,
	0x4d, 0x73, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xf2, 0xde, 0x1f, 0x0d, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x1f, 0x0a, 0x1d, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x66, 0x6c, 0x75, 0x69, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xf2, 0xde, 0x1f, 0x0d, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x22, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x66, 0x6c, 0x75, 0x69, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x4d, 0x73, 0x67, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x4c, 0x6f,
	0x63, 0x6b, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0xf2, 0xde, 0x1f, 0x0d, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x22, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x1c, 0x4d, 0x73,
	0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75,
	0x69, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xf2, 0xde, 0x1f, 0x0d,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x22, 0x36, 0x0a, 0x24, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x6e,
	0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x22, 0x72, 0x0a, 0x18, 0x4d,
	0x73, 0x67, 0x55, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xf2, 0xde, 0x1f, 0x0d, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x12, 0xf2, 0xde, 0x1f, 0x0e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x22, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22,
	0x4a, 0x0a, 0x20, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x57, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x78,
	0x69, 0x74, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x73, 0x32, 0xf4, 0x04, 0x0a, 0x03,
	0x4d, 0x73, 0x67, 0x12, 0x72, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x2e, 0x4d,
	0x73, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x1a, 0x31, 0x2e, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x66, 0x6c, 0x75, 0x69, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x2e, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66,
	0x6c, 0x75, 0x69, 0x64, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75,
	0x69, 0x64, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x1a, 0x33, 0x2e, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69,
	0x64, 0x2e, 0x4d, 0x73, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x55,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x78, 0x0a, 0x14, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x55,
	0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x2e, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x2e, 0x4d,
	0x73, 0x67, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x55, 0x6e, 0x62, 0x6f,
	0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x1a, 0x33, 0x2e, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x2e, 0x4d, 0x73, 0x67, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x19,
	0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69,
	0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x2e, 0x4d,
	0x73, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c,
	0x75, 0x69, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x1a, 0x38, 0x2e, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64,
	0x2e, 0x4d, 0x73, 0x67, 0x4c, 0x6f, 0x63, 0x6b, 0x41, 0x6e, 0x64, 0x53, 0x75, 0x70, 0x65, 0x72,
	0x66, 0x6c, 0x75, 0x69, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x15, 0x55, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2c,
	0x2e, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c,
	0x75, 0x69, 0x64, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x1a, 0x34, 0x2e, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69,
	0x64, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0xaf, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x42, 0x07, 0x54,
	0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x23, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x69, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0xa2, 0x02, 0x03,
	0x4f, 0x53, 0x58, 0xaa, 0x02, 0x12, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0xca, 0x02, 0x12, 0x4f, 0x73, 0x6d, 0x6f, 0x73,
	0x69, 0x73, 0x5c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0xe2, 0x02, 0x1e,
	0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x5c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75,
	0x69, 0x64, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x13, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x3a, 0x3a, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66,
	0x6c, 0x75, 0x69, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_osmosis_superfluid_tx_proto_rawDescOnce sync.Once
	file_osmosis_superfluid_tx_proto_rawDescData = file_osmosis_superfluid_tx_proto_rawDesc
)

func file_osmosis_superfluid_tx_proto_rawDescGZIP() []byte {
	file_osmosis_superfluid_tx_proto_rawDescOnce.Do(func() {
		file_osmosis_superfluid_tx_proto_rawDescData = protoimpl.X.CompressGZIP(file_osmosis_superfluid_tx_proto_rawDescData)
	})
	return file_osmosis_superfluid_tx_proto_rawDescData
}

var file_osmosis_superfluid_tx_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_osmosis_superfluid_tx_proto_goTypes = []interface{}{
	(*MsgSuperfluidDelegate)(nil),                // 0: osmosis.superfluid.MsgSuperfluidDelegate
	(*MsgSuperfluidDelegateResponse)(nil),        // 1: osmosis.superfluid.MsgSuperfluidDelegateResponse
	(*MsgSuperfluidUndelegate)(nil),              // 2: osmosis.superfluid.MsgSuperfluidUndelegate
	(*MsgSuperfluidUndelegateResponse)(nil),      // 3: osmosis.superfluid.MsgSuperfluidUndelegateResponse
	(*MsgSuperfluidUnbondLock)(nil),              // 4: osmosis.superfluid.MsgSuperfluidUnbondLock
	(*MsgSuperfluidUnbondLockResponse)(nil),      // 5: osmosis.superfluid.MsgSuperfluidUnbondLockResponse
	(*MsgLockAndSuperfluidDelegate)(nil),         // 6: osmosis.superfluid.MsgLockAndSuperfluidDelegate
	(*MsgLockAndSuperfluidDelegateResponse)(nil), // 7: osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse
	(*MsgUnPoolWhitelistedPool)(nil),             // 8: osmosis.superfluid.MsgUnPoolWhitelistedPool
	(*MsgUnPoolWhitelistedPoolResponse)(nil),     // 9: osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse
	(*v1beta1.Coin)(nil),                         // 10: cosmos.base.v1beta1.Coin
}
var file_osmosis_superfluid_tx_proto_depIdxs = []int32{
	10, // 0: osmosis.superfluid.MsgLockAndSuperfluidDelegate.coins:type_name -> cosmos.base.v1beta1.Coin
	0,  // 1: osmosis.superfluid.Msg.SuperfluidDelegate:input_type -> osmosis.superfluid.MsgSuperfluidDelegate
	2,  // 2: osmosis.superfluid.Msg.SuperfluidUndelegate:input_type -> osmosis.superfluid.MsgSuperfluidUndelegate
	4,  // 3: osmosis.superfluid.Msg.SuperfluidUnbondLock:input_type -> osmosis.superfluid.MsgSuperfluidUnbondLock
	6,  // 4: osmosis.superfluid.Msg.LockAndSuperfluidDelegate:input_type -> osmosis.superfluid.MsgLockAndSuperfluidDelegate
	8,  // 5: osmosis.superfluid.Msg.UnPoolWhitelistedPool:input_type -> osmosis.superfluid.MsgUnPoolWhitelistedPool
	1,  // 6: osmosis.superfluid.Msg.SuperfluidDelegate:output_type -> osmosis.superfluid.MsgSuperfluidDelegateResponse
	3,  // 7: osmosis.superfluid.Msg.SuperfluidUndelegate:output_type -> osmosis.superfluid.MsgSuperfluidUndelegateResponse
	5,  // 8: osmosis.superfluid.Msg.SuperfluidUnbondLock:output_type -> osmosis.superfluid.MsgSuperfluidUnbondLockResponse
	7,  // 9: osmosis.superfluid.Msg.LockAndSuperfluidDelegate:output_type -> osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse
	9,  // 10: osmosis.superfluid.Msg.UnPoolWhitelistedPool:output_type -> osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse
	6,  // [6:11] is the sub-list for method output_type
	1,  // [1:6] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_osmosis_superfluid_tx_proto_init() }
func file_osmosis_superfluid_tx_proto_init() {
	if File_osmosis_superfluid_tx_proto != nil {
		return
	}
	file_osmosis_superfluid_superfluid_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_osmosis_superfluid_tx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSuperfluidDelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_tx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSuperfluidDelegateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_tx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSuperfluidUndelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_tx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSuperfluidUndelegateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_tx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSuperfluidUnbondLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_tx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgSuperfluidUnbondLockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_tx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgLockAndSuperfluidDelegate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_tx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgLockAndSuperfluidDelegateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_tx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUnPoolWhitelistedPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_tx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUnPoolWhitelistedPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_osmosis_superfluid_tx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_osmosis_superfluid_tx_proto_goTypes,
		DependencyIndexes: file_osmosis_superfluid_tx_proto_depIdxs,
		MessageInfos:      file_osmosis_superfluid_tx_proto_msgTypes,
	}.Build()
	File_osmosis_superfluid_tx_proto = out.File
	file_osmosis_superfluid_tx_proto_rawDesc = nil
	file_osmosis_superfluid_tx_proto_goTypes = nil
	file_osmosis_superfluid_tx_proto_depIdxs = nil
}
