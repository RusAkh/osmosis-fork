// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package superfluid

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	v1beta1 "github.com/osmosis-labs/osmosis/v13/api/cosmos/base/v1beta1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_SuperfluidAsset            protoreflect.MessageDescriptor
	fd_SuperfluidAsset_denom      protoreflect.FieldDescriptor
	fd_SuperfluidAsset_asset_type protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_superfluid_proto_init()
	md_SuperfluidAsset = File_osmosis_superfluid_superfluid_proto.Messages().ByName("SuperfluidAsset")
	fd_SuperfluidAsset_denom = md_SuperfluidAsset.Fields().ByName("denom")
	fd_SuperfluidAsset_asset_type = md_SuperfluidAsset.Fields().ByName("asset_type")
}

var _ protoreflect.Message = (*fastReflection_SuperfluidAsset)(nil)

type fastReflection_SuperfluidAsset SuperfluidAsset

func (x *SuperfluidAsset) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SuperfluidAsset)(x)
}

func (x *SuperfluidAsset) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SuperfluidAsset_messageType fastReflection_SuperfluidAsset_messageType
var _ protoreflect.MessageType = fastReflection_SuperfluidAsset_messageType{}

type fastReflection_SuperfluidAsset_messageType struct{}

func (x fastReflection_SuperfluidAsset_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SuperfluidAsset)(nil)
}
func (x fastReflection_SuperfluidAsset_messageType) New() protoreflect.Message {
	return new(fastReflection_SuperfluidAsset)
}
func (x fastReflection_SuperfluidAsset_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SuperfluidAsset
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SuperfluidAsset) Descriptor() protoreflect.MessageDescriptor {
	return md_SuperfluidAsset
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SuperfluidAsset) Type() protoreflect.MessageType {
	return _fastReflection_SuperfluidAsset_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SuperfluidAsset) New() protoreflect.Message {
	return new(fastReflection_SuperfluidAsset)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SuperfluidAsset) Interface() protoreflect.ProtoMessage {
	return (*SuperfluidAsset)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SuperfluidAsset) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Denom != "" {
		value := protoreflect.ValueOfString(x.Denom)
		if !f(fd_SuperfluidAsset_denom, value) {
			return
		}
	}
	if x.AssetType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.AssetType))
		if !f(fd_SuperfluidAsset_asset_type, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SuperfluidAsset) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidAsset.denom":
		return x.Denom != ""
	case "osmosis.superfluid.SuperfluidAsset.asset_type":
		return x.AssetType != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidAsset"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidAsset does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidAsset) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidAsset.denom":
		x.Denom = ""
	case "osmosis.superfluid.SuperfluidAsset.asset_type":
		x.AssetType = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidAsset"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidAsset does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SuperfluidAsset) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.SuperfluidAsset.denom":
		value := x.Denom
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.SuperfluidAsset.asset_type":
		value := x.AssetType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidAsset"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidAsset does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidAsset) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidAsset.denom":
		x.Denom = value.Interface().(string)
	case "osmosis.superfluid.SuperfluidAsset.asset_type":
		x.AssetType = (SuperfluidAssetType)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidAsset"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidAsset does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidAsset) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidAsset.denom":
		panic(fmt.Errorf("field denom of message osmosis.superfluid.SuperfluidAsset is not mutable"))
	case "osmosis.superfluid.SuperfluidAsset.asset_type":
		panic(fmt.Errorf("field asset_type of message osmosis.superfluid.SuperfluidAsset is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidAsset"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidAsset does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SuperfluidAsset) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidAsset.denom":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.SuperfluidAsset.asset_type":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidAsset"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidAsset does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SuperfluidAsset) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.SuperfluidAsset", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SuperfluidAsset) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidAsset) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SuperfluidAsset) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SuperfluidAsset) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SuperfluidAsset)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Denom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AssetType != 0 {
			n += 1 + runtime.Sov(uint64(x.AssetType))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SuperfluidAsset)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.AssetType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AssetType))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Denom) > 0 {
			i -= len(x.Denom)
			copy(dAtA[i:], x.Denom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Denom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SuperfluidAsset)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SuperfluidAsset: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SuperfluidAsset: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Denom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
				}
				x.AssetType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AssetType |= SuperfluidAssetType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SuperfluidIntermediaryAccount          protoreflect.MessageDescriptor
	fd_SuperfluidIntermediaryAccount_denom    protoreflect.FieldDescriptor
	fd_SuperfluidIntermediaryAccount_val_addr protoreflect.FieldDescriptor
	fd_SuperfluidIntermediaryAccount_gauge_id protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_superfluid_proto_init()
	md_SuperfluidIntermediaryAccount = File_osmosis_superfluid_superfluid_proto.Messages().ByName("SuperfluidIntermediaryAccount")
	fd_SuperfluidIntermediaryAccount_denom = md_SuperfluidIntermediaryAccount.Fields().ByName("denom")
	fd_SuperfluidIntermediaryAccount_val_addr = md_SuperfluidIntermediaryAccount.Fields().ByName("val_addr")
	fd_SuperfluidIntermediaryAccount_gauge_id = md_SuperfluidIntermediaryAccount.Fields().ByName("gauge_id")
}

var _ protoreflect.Message = (*fastReflection_SuperfluidIntermediaryAccount)(nil)

type fastReflection_SuperfluidIntermediaryAccount SuperfluidIntermediaryAccount

func (x *SuperfluidIntermediaryAccount) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SuperfluidIntermediaryAccount)(x)
}

func (x *SuperfluidIntermediaryAccount) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SuperfluidIntermediaryAccount_messageType fastReflection_SuperfluidIntermediaryAccount_messageType
var _ protoreflect.MessageType = fastReflection_SuperfluidIntermediaryAccount_messageType{}

type fastReflection_SuperfluidIntermediaryAccount_messageType struct{}

func (x fastReflection_SuperfluidIntermediaryAccount_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SuperfluidIntermediaryAccount)(nil)
}
func (x fastReflection_SuperfluidIntermediaryAccount_messageType) New() protoreflect.Message {
	return new(fastReflection_SuperfluidIntermediaryAccount)
}
func (x fastReflection_SuperfluidIntermediaryAccount_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SuperfluidIntermediaryAccount
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SuperfluidIntermediaryAccount) Descriptor() protoreflect.MessageDescriptor {
	return md_SuperfluidIntermediaryAccount
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SuperfluidIntermediaryAccount) Type() protoreflect.MessageType {
	return _fastReflection_SuperfluidIntermediaryAccount_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SuperfluidIntermediaryAccount) New() protoreflect.Message {
	return new(fastReflection_SuperfluidIntermediaryAccount)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SuperfluidIntermediaryAccount) Interface() protoreflect.ProtoMessage {
	return (*SuperfluidIntermediaryAccount)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SuperfluidIntermediaryAccount) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Denom != "" {
		value := protoreflect.ValueOfString(x.Denom)
		if !f(fd_SuperfluidIntermediaryAccount_denom, value) {
			return
		}
	}
	if x.ValAddr != "" {
		value := protoreflect.ValueOfString(x.ValAddr)
		if !f(fd_SuperfluidIntermediaryAccount_val_addr, value) {
			return
		}
	}
	if x.GaugeId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GaugeId)
		if !f(fd_SuperfluidIntermediaryAccount_gauge_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SuperfluidIntermediaryAccount) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.denom":
		return x.Denom != ""
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.val_addr":
		return x.ValAddr != ""
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.gauge_id":
		return x.GaugeId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidIntermediaryAccount"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidIntermediaryAccount does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidIntermediaryAccount) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.denom":
		x.Denom = ""
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.val_addr":
		x.ValAddr = ""
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.gauge_id":
		x.GaugeId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidIntermediaryAccount"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidIntermediaryAccount does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SuperfluidIntermediaryAccount) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.denom":
		value := x.Denom
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.val_addr":
		value := x.ValAddr
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.gauge_id":
		value := x.GaugeId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidIntermediaryAccount"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidIntermediaryAccount does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidIntermediaryAccount) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.denom":
		x.Denom = value.Interface().(string)
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.val_addr":
		x.ValAddr = value.Interface().(string)
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.gauge_id":
		x.GaugeId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidIntermediaryAccount"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidIntermediaryAccount does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidIntermediaryAccount) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.denom":
		panic(fmt.Errorf("field denom of message osmosis.superfluid.SuperfluidIntermediaryAccount is not mutable"))
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.val_addr":
		panic(fmt.Errorf("field val_addr of message osmosis.superfluid.SuperfluidIntermediaryAccount is not mutable"))
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.gauge_id":
		panic(fmt.Errorf("field gauge_id of message osmosis.superfluid.SuperfluidIntermediaryAccount is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidIntermediaryAccount"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidIntermediaryAccount does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SuperfluidIntermediaryAccount) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.denom":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.val_addr":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.SuperfluidIntermediaryAccount.gauge_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidIntermediaryAccount"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidIntermediaryAccount does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SuperfluidIntermediaryAccount) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.SuperfluidIntermediaryAccount", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SuperfluidIntermediaryAccount) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidIntermediaryAccount) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SuperfluidIntermediaryAccount) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SuperfluidIntermediaryAccount) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SuperfluidIntermediaryAccount)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Denom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ValAddr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.GaugeId != 0 {
			n += 1 + runtime.Sov(uint64(x.GaugeId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SuperfluidIntermediaryAccount)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.GaugeId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GaugeId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.ValAddr) > 0 {
			i -= len(x.ValAddr)
			copy(dAtA[i:], x.ValAddr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValAddr)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Denom) > 0 {
			i -= len(x.Denom)
			copy(dAtA[i:], x.Denom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Denom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SuperfluidIntermediaryAccount)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SuperfluidIntermediaryAccount: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SuperfluidIntermediaryAccount: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Denom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValAddr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
				}
				x.GaugeId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GaugeId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_OsmoEquivalentMultiplierRecord              protoreflect.MessageDescriptor
	fd_OsmoEquivalentMultiplierRecord_epoch_number protoreflect.FieldDescriptor
	fd_OsmoEquivalentMultiplierRecord_denom        protoreflect.FieldDescriptor
	fd_OsmoEquivalentMultiplierRecord_multiplier   protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_superfluid_proto_init()
	md_OsmoEquivalentMultiplierRecord = File_osmosis_superfluid_superfluid_proto.Messages().ByName("OsmoEquivalentMultiplierRecord")
	fd_OsmoEquivalentMultiplierRecord_epoch_number = md_OsmoEquivalentMultiplierRecord.Fields().ByName("epoch_number")
	fd_OsmoEquivalentMultiplierRecord_denom = md_OsmoEquivalentMultiplierRecord.Fields().ByName("denom")
	fd_OsmoEquivalentMultiplierRecord_multiplier = md_OsmoEquivalentMultiplierRecord.Fields().ByName("multiplier")
}

var _ protoreflect.Message = (*fastReflection_OsmoEquivalentMultiplierRecord)(nil)

type fastReflection_OsmoEquivalentMultiplierRecord OsmoEquivalentMultiplierRecord

func (x *OsmoEquivalentMultiplierRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OsmoEquivalentMultiplierRecord)(x)
}

func (x *OsmoEquivalentMultiplierRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OsmoEquivalentMultiplierRecord_messageType fastReflection_OsmoEquivalentMultiplierRecord_messageType
var _ protoreflect.MessageType = fastReflection_OsmoEquivalentMultiplierRecord_messageType{}

type fastReflection_OsmoEquivalentMultiplierRecord_messageType struct{}

func (x fastReflection_OsmoEquivalentMultiplierRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OsmoEquivalentMultiplierRecord)(nil)
}
func (x fastReflection_OsmoEquivalentMultiplierRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_OsmoEquivalentMultiplierRecord)
}
func (x fastReflection_OsmoEquivalentMultiplierRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OsmoEquivalentMultiplierRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_OsmoEquivalentMultiplierRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) Type() protoreflect.MessageType {
	return _fastReflection_OsmoEquivalentMultiplierRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) New() protoreflect.Message {
	return new(fastReflection_OsmoEquivalentMultiplierRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) Interface() protoreflect.ProtoMessage {
	return (*OsmoEquivalentMultiplierRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EpochNumber != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochNumber)
		if !f(fd_OsmoEquivalentMultiplierRecord_epoch_number, value) {
			return
		}
	}
	if x.Denom != "" {
		value := protoreflect.ValueOfString(x.Denom)
		if !f(fd_OsmoEquivalentMultiplierRecord_denom, value) {
			return
		}
	}
	if x.Multiplier != "" {
		value := protoreflect.ValueOfString(x.Multiplier)
		if !f(fd_OsmoEquivalentMultiplierRecord_multiplier, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.epoch_number":
		return x.EpochNumber != int64(0)
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.denom":
		return x.Denom != ""
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.multiplier":
		return x.Multiplier != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.OsmoEquivalentMultiplierRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.OsmoEquivalentMultiplierRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.epoch_number":
		x.EpochNumber = int64(0)
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.denom":
		x.Denom = ""
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.multiplier":
		x.Multiplier = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.OsmoEquivalentMultiplierRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.OsmoEquivalentMultiplierRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.epoch_number":
		value := x.EpochNumber
		return protoreflect.ValueOfInt64(value)
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.denom":
		value := x.Denom
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.multiplier":
		value := x.Multiplier
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.OsmoEquivalentMultiplierRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.OsmoEquivalentMultiplierRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.epoch_number":
		x.EpochNumber = value.Int()
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.denom":
		x.Denom = value.Interface().(string)
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.multiplier":
		x.Multiplier = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.OsmoEquivalentMultiplierRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.OsmoEquivalentMultiplierRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.epoch_number":
		panic(fmt.Errorf("field epoch_number of message osmosis.superfluid.OsmoEquivalentMultiplierRecord is not mutable"))
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.denom":
		panic(fmt.Errorf("field denom of message osmosis.superfluid.OsmoEquivalentMultiplierRecord is not mutable"))
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.multiplier":
		panic(fmt.Errorf("field multiplier of message osmosis.superfluid.OsmoEquivalentMultiplierRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.OsmoEquivalentMultiplierRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.OsmoEquivalentMultiplierRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.epoch_number":
		return protoreflect.ValueOfInt64(int64(0))
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.denom":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.OsmoEquivalentMultiplierRecord.multiplier":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.OsmoEquivalentMultiplierRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.OsmoEquivalentMultiplierRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.OsmoEquivalentMultiplierRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OsmoEquivalentMultiplierRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OsmoEquivalentMultiplierRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EpochNumber != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochNumber))
		}
		l = len(x.Denom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Multiplier)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OsmoEquivalentMultiplierRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Multiplier) > 0 {
			i -= len(x.Multiplier)
			copy(dAtA[i:], x.Multiplier)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Multiplier)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Denom) > 0 {
			i -= len(x.Denom)
			copy(dAtA[i:], x.Denom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Denom)))
			i--
			dAtA[i] = 0x12
		}
		if x.EpochNumber != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochNumber))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OsmoEquivalentMultiplierRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OsmoEquivalentMultiplierRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OsmoEquivalentMultiplierRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
				}
				x.EpochNumber = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochNumber |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Denom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Multiplier = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_SuperfluidDelegationRecord                          protoreflect.MessageDescriptor
	fd_SuperfluidDelegationRecord_delegator_address        protoreflect.FieldDescriptor
	fd_SuperfluidDelegationRecord_validator_address        protoreflect.FieldDescriptor
	fd_SuperfluidDelegationRecord_delegation_amount        protoreflect.FieldDescriptor
	fd_SuperfluidDelegationRecord_equivalent_staked_amount protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_superfluid_proto_init()
	md_SuperfluidDelegationRecord = File_osmosis_superfluid_superfluid_proto.Messages().ByName("SuperfluidDelegationRecord")
	fd_SuperfluidDelegationRecord_delegator_address = md_SuperfluidDelegationRecord.Fields().ByName("delegator_address")
	fd_SuperfluidDelegationRecord_validator_address = md_SuperfluidDelegationRecord.Fields().ByName("validator_address")
	fd_SuperfluidDelegationRecord_delegation_amount = md_SuperfluidDelegationRecord.Fields().ByName("delegation_amount")
	fd_SuperfluidDelegationRecord_equivalent_staked_amount = md_SuperfluidDelegationRecord.Fields().ByName("equivalent_staked_amount")
}

var _ protoreflect.Message = (*fastReflection_SuperfluidDelegationRecord)(nil)

type fastReflection_SuperfluidDelegationRecord SuperfluidDelegationRecord

func (x *SuperfluidDelegationRecord) ProtoReflect() protoreflect.Message {
	return (*fastReflection_SuperfluidDelegationRecord)(x)
}

func (x *SuperfluidDelegationRecord) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_SuperfluidDelegationRecord_messageType fastReflection_SuperfluidDelegationRecord_messageType
var _ protoreflect.MessageType = fastReflection_SuperfluidDelegationRecord_messageType{}

type fastReflection_SuperfluidDelegationRecord_messageType struct{}

func (x fastReflection_SuperfluidDelegationRecord_messageType) Zero() protoreflect.Message {
	return (*fastReflection_SuperfluidDelegationRecord)(nil)
}
func (x fastReflection_SuperfluidDelegationRecord_messageType) New() protoreflect.Message {
	return new(fastReflection_SuperfluidDelegationRecord)
}
func (x fastReflection_SuperfluidDelegationRecord_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_SuperfluidDelegationRecord
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_SuperfluidDelegationRecord) Descriptor() protoreflect.MessageDescriptor {
	return md_SuperfluidDelegationRecord
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_SuperfluidDelegationRecord) Type() protoreflect.MessageType {
	return _fastReflection_SuperfluidDelegationRecord_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_SuperfluidDelegationRecord) New() protoreflect.Message {
	return new(fastReflection_SuperfluidDelegationRecord)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_SuperfluidDelegationRecord) Interface() protoreflect.ProtoMessage {
	return (*SuperfluidDelegationRecord)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_SuperfluidDelegationRecord) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DelegatorAddress != "" {
		value := protoreflect.ValueOfString(x.DelegatorAddress)
		if !f(fd_SuperfluidDelegationRecord_delegator_address, value) {
			return
		}
	}
	if x.ValidatorAddress != "" {
		value := protoreflect.ValueOfString(x.ValidatorAddress)
		if !f(fd_SuperfluidDelegationRecord_validator_address, value) {
			return
		}
	}
	if x.DelegationAmount != nil {
		value := protoreflect.ValueOfMessage(x.DelegationAmount.ProtoReflect())
		if !f(fd_SuperfluidDelegationRecord_delegation_amount, value) {
			return
		}
	}
	if x.EquivalentStakedAmount != nil {
		value := protoreflect.ValueOfMessage(x.EquivalentStakedAmount.ProtoReflect())
		if !f(fd_SuperfluidDelegationRecord_equivalent_staked_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_SuperfluidDelegationRecord) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegator_address":
		return x.DelegatorAddress != ""
	case "osmosis.superfluid.SuperfluidDelegationRecord.validator_address":
		return x.ValidatorAddress != ""
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegation_amount":
		return x.DelegationAmount != nil
	case "osmosis.superfluid.SuperfluidDelegationRecord.equivalent_staked_amount":
		return x.EquivalentStakedAmount != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidDelegationRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidDelegationRecord does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidDelegationRecord) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegator_address":
		x.DelegatorAddress = ""
	case "osmosis.superfluid.SuperfluidDelegationRecord.validator_address":
		x.ValidatorAddress = ""
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegation_amount":
		x.DelegationAmount = nil
	case "osmosis.superfluid.SuperfluidDelegationRecord.equivalent_staked_amount":
		x.EquivalentStakedAmount = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidDelegationRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidDelegationRecord does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_SuperfluidDelegationRecord) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegator_address":
		value := x.DelegatorAddress
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.SuperfluidDelegationRecord.validator_address":
		value := x.ValidatorAddress
		return protoreflect.ValueOfString(value)
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegation_amount":
		value := x.DelegationAmount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "osmosis.superfluid.SuperfluidDelegationRecord.equivalent_staked_amount":
		value := x.EquivalentStakedAmount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidDelegationRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidDelegationRecord does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidDelegationRecord) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegator_address":
		x.DelegatorAddress = value.Interface().(string)
	case "osmosis.superfluid.SuperfluidDelegationRecord.validator_address":
		x.ValidatorAddress = value.Interface().(string)
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegation_amount":
		x.DelegationAmount = value.Message().Interface().(*v1beta1.Coin)
	case "osmosis.superfluid.SuperfluidDelegationRecord.equivalent_staked_amount":
		x.EquivalentStakedAmount = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidDelegationRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidDelegationRecord does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidDelegationRecord) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegation_amount":
		if x.DelegationAmount == nil {
			x.DelegationAmount = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.DelegationAmount.ProtoReflect())
	case "osmosis.superfluid.SuperfluidDelegationRecord.equivalent_staked_amount":
		if x.EquivalentStakedAmount == nil {
			x.EquivalentStakedAmount = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.EquivalentStakedAmount.ProtoReflect())
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegator_address":
		panic(fmt.Errorf("field delegator_address of message osmosis.superfluid.SuperfluidDelegationRecord is not mutable"))
	case "osmosis.superfluid.SuperfluidDelegationRecord.validator_address":
		panic(fmt.Errorf("field validator_address of message osmosis.superfluid.SuperfluidDelegationRecord is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidDelegationRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidDelegationRecord does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_SuperfluidDelegationRecord) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegator_address":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.SuperfluidDelegationRecord.validator_address":
		return protoreflect.ValueOfString("")
	case "osmosis.superfluid.SuperfluidDelegationRecord.delegation_amount":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "osmosis.superfluid.SuperfluidDelegationRecord.equivalent_staked_amount":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.SuperfluidDelegationRecord"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.SuperfluidDelegationRecord does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_SuperfluidDelegationRecord) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.SuperfluidDelegationRecord", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_SuperfluidDelegationRecord) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_SuperfluidDelegationRecord) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_SuperfluidDelegationRecord) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_SuperfluidDelegationRecord) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*SuperfluidDelegationRecord)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.DelegatorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ValidatorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DelegationAmount != nil {
			l = options.Size(x.DelegationAmount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EquivalentStakedAmount != nil {
			l = options.Size(x.EquivalentStakedAmount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*SuperfluidDelegationRecord)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EquivalentStakedAmount != nil {
			encoded, err := options.Marshal(x.EquivalentStakedAmount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.DelegationAmount != nil {
			encoded, err := options.Marshal(x.DelegationAmount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ValidatorAddress) > 0 {
			i -= len(x.ValidatorAddress)
			copy(dAtA[i:], x.ValidatorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.DelegatorAddress) > 0 {
			i -= len(x.DelegatorAddress)
			copy(dAtA[i:], x.DelegatorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DelegatorAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*SuperfluidDelegationRecord)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SuperfluidDelegationRecord: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: SuperfluidDelegationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DelegatorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegationAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DelegationAmount == nil {
					x.DelegationAmount = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DelegationAmount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EquivalentStakedAmount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EquivalentStakedAmount == nil {
					x.EquivalentStakedAmount = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EquivalentStakedAmount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_LockIdIntermediaryAccountConnection                      protoreflect.MessageDescriptor
	fd_LockIdIntermediaryAccountConnection_lock_id              protoreflect.FieldDescriptor
	fd_LockIdIntermediaryAccountConnection_intermediary_account protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_superfluid_proto_init()
	md_LockIdIntermediaryAccountConnection = File_osmosis_superfluid_superfluid_proto.Messages().ByName("LockIdIntermediaryAccountConnection")
	fd_LockIdIntermediaryAccountConnection_lock_id = md_LockIdIntermediaryAccountConnection.Fields().ByName("lock_id")
	fd_LockIdIntermediaryAccountConnection_intermediary_account = md_LockIdIntermediaryAccountConnection.Fields().ByName("intermediary_account")
}

var _ protoreflect.Message = (*fastReflection_LockIdIntermediaryAccountConnection)(nil)

type fastReflection_LockIdIntermediaryAccountConnection LockIdIntermediaryAccountConnection

func (x *LockIdIntermediaryAccountConnection) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LockIdIntermediaryAccountConnection)(x)
}

func (x *LockIdIntermediaryAccountConnection) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LockIdIntermediaryAccountConnection_messageType fastReflection_LockIdIntermediaryAccountConnection_messageType
var _ protoreflect.MessageType = fastReflection_LockIdIntermediaryAccountConnection_messageType{}

type fastReflection_LockIdIntermediaryAccountConnection_messageType struct{}

func (x fastReflection_LockIdIntermediaryAccountConnection_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LockIdIntermediaryAccountConnection)(nil)
}
func (x fastReflection_LockIdIntermediaryAccountConnection_messageType) New() protoreflect.Message {
	return new(fastReflection_LockIdIntermediaryAccountConnection)
}
func (x fastReflection_LockIdIntermediaryAccountConnection_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LockIdIntermediaryAccountConnection
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LockIdIntermediaryAccountConnection) Descriptor() protoreflect.MessageDescriptor {
	return md_LockIdIntermediaryAccountConnection
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LockIdIntermediaryAccountConnection) Type() protoreflect.MessageType {
	return _fastReflection_LockIdIntermediaryAccountConnection_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LockIdIntermediaryAccountConnection) New() protoreflect.Message {
	return new(fastReflection_LockIdIntermediaryAccountConnection)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LockIdIntermediaryAccountConnection) Interface() protoreflect.ProtoMessage {
	return (*LockIdIntermediaryAccountConnection)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LockIdIntermediaryAccountConnection) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.LockId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LockId)
		if !f(fd_LockIdIntermediaryAccountConnection_lock_id, value) {
			return
		}
	}
	if x.IntermediaryAccount != "" {
		value := protoreflect.ValueOfString(x.IntermediaryAccount)
		if !f(fd_LockIdIntermediaryAccountConnection_intermediary_account, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LockIdIntermediaryAccountConnection) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.lock_id":
		return x.LockId != uint64(0)
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.intermediary_account":
		return x.IntermediaryAccount != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.LockIdIntermediaryAccountConnection"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.LockIdIntermediaryAccountConnection does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LockIdIntermediaryAccountConnection) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.lock_id":
		x.LockId = uint64(0)
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.intermediary_account":
		x.IntermediaryAccount = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.LockIdIntermediaryAccountConnection"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.LockIdIntermediaryAccountConnection does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LockIdIntermediaryAccountConnection) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.lock_id":
		value := x.LockId
		return protoreflect.ValueOfUint64(value)
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.intermediary_account":
		value := x.IntermediaryAccount
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.LockIdIntermediaryAccountConnection"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.LockIdIntermediaryAccountConnection does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LockIdIntermediaryAccountConnection) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.lock_id":
		x.LockId = value.Uint()
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.intermediary_account":
		x.IntermediaryAccount = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.LockIdIntermediaryAccountConnection"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.LockIdIntermediaryAccountConnection does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LockIdIntermediaryAccountConnection) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.lock_id":
		panic(fmt.Errorf("field lock_id of message osmosis.superfluid.LockIdIntermediaryAccountConnection is not mutable"))
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.intermediary_account":
		panic(fmt.Errorf("field intermediary_account of message osmosis.superfluid.LockIdIntermediaryAccountConnection is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.LockIdIntermediaryAccountConnection"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.LockIdIntermediaryAccountConnection does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LockIdIntermediaryAccountConnection) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.lock_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "osmosis.superfluid.LockIdIntermediaryAccountConnection.intermediary_account":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.LockIdIntermediaryAccountConnection"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.LockIdIntermediaryAccountConnection does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LockIdIntermediaryAccountConnection) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.LockIdIntermediaryAccountConnection", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LockIdIntermediaryAccountConnection) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LockIdIntermediaryAccountConnection) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LockIdIntermediaryAccountConnection) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LockIdIntermediaryAccountConnection) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LockIdIntermediaryAccountConnection)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.LockId != 0 {
			n += 1 + runtime.Sov(uint64(x.LockId))
		}
		l = len(x.IntermediaryAccount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LockIdIntermediaryAccountConnection)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.IntermediaryAccount) > 0 {
			i -= len(x.IntermediaryAccount)
			copy(dAtA[i:], x.IntermediaryAccount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IntermediaryAccount)))
			i--
			dAtA[i] = 0x12
		}
		if x.LockId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LockId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LockIdIntermediaryAccountConnection)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LockIdIntermediaryAccountConnection: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LockIdIntermediaryAccountConnection: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
				}
				x.LockId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LockId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IntermediaryAccount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IntermediaryAccount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_UnpoolWhitelistedPools_1_list)(nil)

type _UnpoolWhitelistedPools_1_list struct {
	list *[]uint64
}

func (x *_UnpoolWhitelistedPools_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_UnpoolWhitelistedPools_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_UnpoolWhitelistedPools_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_UnpoolWhitelistedPools_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_UnpoolWhitelistedPools_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message UnpoolWhitelistedPools at list field Ids as it is not of Message kind"))
}

func (x *_UnpoolWhitelistedPools_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_UnpoolWhitelistedPools_1_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_UnpoolWhitelistedPools_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_UnpoolWhitelistedPools     protoreflect.MessageDescriptor
	fd_UnpoolWhitelistedPools_ids protoreflect.FieldDescriptor
)

func init() {
	file_osmosis_superfluid_superfluid_proto_init()
	md_UnpoolWhitelistedPools = File_osmosis_superfluid_superfluid_proto.Messages().ByName("UnpoolWhitelistedPools")
	fd_UnpoolWhitelistedPools_ids = md_UnpoolWhitelistedPools.Fields().ByName("ids")
}

var _ protoreflect.Message = (*fastReflection_UnpoolWhitelistedPools)(nil)

type fastReflection_UnpoolWhitelistedPools UnpoolWhitelistedPools

func (x *UnpoolWhitelistedPools) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UnpoolWhitelistedPools)(x)
}

func (x *UnpoolWhitelistedPools) slowProtoReflect() protoreflect.Message {
	mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UnpoolWhitelistedPools_messageType fastReflection_UnpoolWhitelistedPools_messageType
var _ protoreflect.MessageType = fastReflection_UnpoolWhitelistedPools_messageType{}

type fastReflection_UnpoolWhitelistedPools_messageType struct{}

func (x fastReflection_UnpoolWhitelistedPools_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UnpoolWhitelistedPools)(nil)
}
func (x fastReflection_UnpoolWhitelistedPools_messageType) New() protoreflect.Message {
	return new(fastReflection_UnpoolWhitelistedPools)
}
func (x fastReflection_UnpoolWhitelistedPools_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UnpoolWhitelistedPools
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UnpoolWhitelistedPools) Descriptor() protoreflect.MessageDescriptor {
	return md_UnpoolWhitelistedPools
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UnpoolWhitelistedPools) Type() protoreflect.MessageType {
	return _fastReflection_UnpoolWhitelistedPools_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UnpoolWhitelistedPools) New() protoreflect.Message {
	return new(fastReflection_UnpoolWhitelistedPools)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UnpoolWhitelistedPools) Interface() protoreflect.ProtoMessage {
	return (*UnpoolWhitelistedPools)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UnpoolWhitelistedPools) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Ids) != 0 {
		value := protoreflect.ValueOfList(&_UnpoolWhitelistedPools_1_list{list: &x.Ids})
		if !f(fd_UnpoolWhitelistedPools_ids, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UnpoolWhitelistedPools) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "osmosis.superfluid.UnpoolWhitelistedPools.ids":
		return len(x.Ids) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.UnpoolWhitelistedPools"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.UnpoolWhitelistedPools does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UnpoolWhitelistedPools) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "osmosis.superfluid.UnpoolWhitelistedPools.ids":
		x.Ids = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.UnpoolWhitelistedPools"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.UnpoolWhitelistedPools does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UnpoolWhitelistedPools) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "osmosis.superfluid.UnpoolWhitelistedPools.ids":
		if len(x.Ids) == 0 {
			return protoreflect.ValueOfList(&_UnpoolWhitelistedPools_1_list{})
		}
		listValue := &_UnpoolWhitelistedPools_1_list{list: &x.Ids}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.UnpoolWhitelistedPools"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.UnpoolWhitelistedPools does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UnpoolWhitelistedPools) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "osmosis.superfluid.UnpoolWhitelistedPools.ids":
		lv := value.List()
		clv := lv.(*_UnpoolWhitelistedPools_1_list)
		x.Ids = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.UnpoolWhitelistedPools"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.UnpoolWhitelistedPools does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UnpoolWhitelistedPools) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.UnpoolWhitelistedPools.ids":
		if x.Ids == nil {
			x.Ids = []uint64{}
		}
		value := &_UnpoolWhitelistedPools_1_list{list: &x.Ids}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.UnpoolWhitelistedPools"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.UnpoolWhitelistedPools does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UnpoolWhitelistedPools) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "osmosis.superfluid.UnpoolWhitelistedPools.ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_UnpoolWhitelistedPools_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: osmosis.superfluid.UnpoolWhitelistedPools"))
		}
		panic(fmt.Errorf("message osmosis.superfluid.UnpoolWhitelistedPools does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UnpoolWhitelistedPools) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in osmosis.superfluid.UnpoolWhitelistedPools", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UnpoolWhitelistedPools) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UnpoolWhitelistedPools) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UnpoolWhitelistedPools) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UnpoolWhitelistedPools) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UnpoolWhitelistedPools)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Ids) > 0 {
			l = 0
			for _, e := range x.Ids {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UnpoolWhitelistedPools)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Ids) > 0 {
			var pksize2 int
			for _, num := range x.Ids {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.Ids {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UnpoolWhitelistedPools)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UnpoolWhitelistedPools: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UnpoolWhitelistedPools: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.Ids = append(x.Ids, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.Ids) == 0 {
						x.Ids = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.Ids = append(x.Ids, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: osmosis/superfluid/superfluid.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SuperfluidAssetType indicates whether the superfluid asset is
// a native token itself or the lp share of a pool.
type SuperfluidAssetType int32

const (
	SuperfluidAssetType_SuperfluidAssetTypeNative  SuperfluidAssetType = 0
	SuperfluidAssetType_SuperfluidAssetTypeLPShare SuperfluidAssetType = 1 // SuperfluidAssetTypeLendingShare = 2; // for now not exist
)

// Enum value maps for SuperfluidAssetType.
var (
	SuperfluidAssetType_name = map[int32]string{
		0: "SuperfluidAssetTypeNative",
		1: "SuperfluidAssetTypeLPShare",
	}
	SuperfluidAssetType_value = map[string]int32{
		"SuperfluidAssetTypeNative":  0,
		"SuperfluidAssetTypeLPShare": 1,
	}
)

func (x SuperfluidAssetType) Enum() *SuperfluidAssetType {
	p := new(SuperfluidAssetType)
	*p = x
	return p
}

func (x SuperfluidAssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuperfluidAssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_osmosis_superfluid_superfluid_proto_enumTypes[0].Descriptor()
}

func (SuperfluidAssetType) Type() protoreflect.EnumType {
	return &file_osmosis_superfluid_superfluid_proto_enumTypes[0]
}

func (x SuperfluidAssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuperfluidAssetType.Descriptor instead.
func (SuperfluidAssetType) EnumDescriptor() ([]byte, []int) {
	return file_osmosis_superfluid_superfluid_proto_rawDescGZIP(), []int{0}
}

// SuperfluidAsset stores the pair of superfluid asset type and denom pair
type SuperfluidAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// AssetType indicates whether the superfluid asset is a native token or an lp
	// share
	AssetType SuperfluidAssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=osmosis.superfluid.SuperfluidAssetType" json:"asset_type,omitempty"`
}

func (x *SuperfluidAsset) Reset() {
	*x = SuperfluidAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperfluidAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperfluidAsset) ProtoMessage() {}

// Deprecated: Use SuperfluidAsset.ProtoReflect.Descriptor instead.
func (*SuperfluidAsset) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_superfluid_proto_rawDescGZIP(), []int{0}
}

func (x *SuperfluidAsset) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *SuperfluidAsset) GetAssetType() SuperfluidAssetType {
	if x != nil {
		return x.AssetType
	}
	return SuperfluidAssetType_SuperfluidAssetTypeNative
}

// SuperfluidIntermediaryAccount takes the role of intermediary between LP token
// and OSMO tokens for superfluid staking. The intermediary account is the
// actual account responsible for delegation, not the validator account itself.
type SuperfluidIntermediaryAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Denom indicates the denom of the superfluid asset.
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	ValAddr string `protobuf:"bytes,2,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
	// perpetual gauge for rewards distribution
	GaugeId uint64 `protobuf:"varint,3,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty"`
}

func (x *SuperfluidIntermediaryAccount) Reset() {
	*x = SuperfluidIntermediaryAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperfluidIntermediaryAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperfluidIntermediaryAccount) ProtoMessage() {}

// Deprecated: Use SuperfluidIntermediaryAccount.ProtoReflect.Descriptor instead.
func (*SuperfluidIntermediaryAccount) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_superfluid_proto_rawDescGZIP(), []int{1}
}

func (x *SuperfluidIntermediaryAccount) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *SuperfluidIntermediaryAccount) GetValAddr() string {
	if x != nil {
		return x.ValAddr
	}
	return ""
}

func (x *SuperfluidIntermediaryAccount) GetGaugeId() uint64 {
	if x != nil {
		return x.GaugeId
	}
	return 0
}

// The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo worth we
// treat an LP share as having, for all of epoch N. Eventually this is intended
// to be set as the Time-weighted-average-osmo-backing for the entire duration
// of epoch N-1. (Thereby locking whats in use for epoch N as based on the prior
// epochs rewards) However for now, this is not the TWAP but instead the spot
// price at the boundary. For different types of assets in the future, it could
// change.
type OsmoEquivalentMultiplierRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochNumber int64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// superfluid asset denom, can be LP token or native token
	Denom      string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Multiplier string `protobuf:"bytes,3,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
}

func (x *OsmoEquivalentMultiplierRecord) Reset() {
	*x = OsmoEquivalentMultiplierRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsmoEquivalentMultiplierRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsmoEquivalentMultiplierRecord) ProtoMessage() {}

// Deprecated: Use OsmoEquivalentMultiplierRecord.ProtoReflect.Descriptor instead.
func (*OsmoEquivalentMultiplierRecord) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_superfluid_proto_rawDescGZIP(), []int{2}
}

func (x *OsmoEquivalentMultiplierRecord) GetEpochNumber() int64 {
	if x != nil {
		return x.EpochNumber
	}
	return 0
}

func (x *OsmoEquivalentMultiplierRecord) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *OsmoEquivalentMultiplierRecord) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

// SuperfluidDelegationRecord is a struct used to indicate superfluid
// delegations of an account in the state machine in a user friendly form.
type SuperfluidDelegationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegatorAddress       string        `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress       string        `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	DelegationAmount       *v1beta1.Coin `protobuf:"bytes,3,opt,name=delegation_amount,json=delegationAmount,proto3" json:"delegation_amount,omitempty"`
	EquivalentStakedAmount *v1beta1.Coin `protobuf:"bytes,4,opt,name=equivalent_staked_amount,json=equivalentStakedAmount,proto3" json:"equivalent_staked_amount,omitempty"`
}

func (x *SuperfluidDelegationRecord) Reset() {
	*x = SuperfluidDelegationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuperfluidDelegationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuperfluidDelegationRecord) ProtoMessage() {}

// Deprecated: Use SuperfluidDelegationRecord.ProtoReflect.Descriptor instead.
func (*SuperfluidDelegationRecord) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_superfluid_proto_rawDescGZIP(), []int{3}
}

func (x *SuperfluidDelegationRecord) GetDelegatorAddress() string {
	if x != nil {
		return x.DelegatorAddress
	}
	return ""
}

func (x *SuperfluidDelegationRecord) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *SuperfluidDelegationRecord) GetDelegationAmount() *v1beta1.Coin {
	if x != nil {
		return x.DelegationAmount
	}
	return nil
}

func (x *SuperfluidDelegationRecord) GetEquivalentStakedAmount() *v1beta1.Coin {
	if x != nil {
		return x.EquivalentStakedAmount
	}
	return nil
}

// LockIdIntermediaryAccountConnection is a struct used to indicate the
// relationship between the underlying lock id and superfluid delegation done
// via lp shares.
type LockIdIntermediaryAccountConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockId              uint64 `protobuf:"varint,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	IntermediaryAccount string `protobuf:"bytes,2,opt,name=intermediary_account,json=intermediaryAccount,proto3" json:"intermediary_account,omitempty"`
}

func (x *LockIdIntermediaryAccountConnection) Reset() {
	*x = LockIdIntermediaryAccountConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockIdIntermediaryAccountConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockIdIntermediaryAccountConnection) ProtoMessage() {}

// Deprecated: Use LockIdIntermediaryAccountConnection.ProtoReflect.Descriptor instead.
func (*LockIdIntermediaryAccountConnection) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_superfluid_proto_rawDescGZIP(), []int{4}
}

func (x *LockIdIntermediaryAccountConnection) GetLockId() uint64 {
	if x != nil {
		return x.LockId
	}
	return 0
}

func (x *LockIdIntermediaryAccountConnection) GetIntermediaryAccount() string {
	if x != nil {
		return x.IntermediaryAccount
	}
	return ""
}

type UnpoolWhitelistedPools struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *UnpoolWhitelistedPools) Reset() {
	*x = UnpoolWhitelistedPools{}
	if protoimpl.UnsafeEnabled {
		mi := &file_osmosis_superfluid_superfluid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpoolWhitelistedPools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpoolWhitelistedPools) ProtoMessage() {}

// Deprecated: Use UnpoolWhitelistedPools.ProtoReflect.Descriptor instead.
func (*UnpoolWhitelistedPools) Descriptor() ([]byte, []int) {
	return file_osmosis_superfluid_superfluid_proto_rawDescGZIP(), []int{5}
}

func (x *UnpoolWhitelistedPools) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

var File_osmosis_superfluid_superfluid_proto protoreflect.FileDescriptor

var file_osmosis_superfluid_superfluid_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66,
	0x6c, 0x75, 0x69, 0x64, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x79, 0x0a, 0x0f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75,
	0x69, 0x64, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x08, 0x88, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x01, 0x22, 0x6b, 0x0a, 0x1d, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x75, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x61, 0x75, 0x67, 0x65, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x1e, 0x4f, 0x73, 0x6d,
	0x6f, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x63, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0xf2, 0x02, 0x0a, 0x1a, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x77, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf,
	0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x18,
	0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x2b, 0xaa, 0xdf, 0x1f, 0x27, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x16, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x71,
	0x0a, 0x23, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x2a, 0x0a, 0x16, 0x55, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x2a, 0x5a, 0x0a,
	0x13, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75,
	0x69, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69,
	0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x50, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x10, 0x01, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0xce, 0x01, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x2e, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66,
	0x6c, 0x75, 0x69, 0x64, 0x42, 0x0f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x73,
	0x2f, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x33, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c,
	0x75, 0x69, 0x64, 0xa2, 0x02, 0x03, 0x4f, 0x53, 0x58, 0xaa, 0x02, 0x12, 0x4f, 0x73, 0x6d, 0x6f,
	0x73, 0x69, 0x73, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0xca, 0x02,
	0x12, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x5c, 0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c,
	0x75, 0x69, 0x64, 0xe2, 0x02, 0x1e, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x5c, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x4f, 0x73, 0x6d, 0x6f, 0x73, 0x69, 0x73, 0x3a, 0x3a,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_osmosis_superfluid_superfluid_proto_rawDescOnce sync.Once
	file_osmosis_superfluid_superfluid_proto_rawDescData = file_osmosis_superfluid_superfluid_proto_rawDesc
)

func file_osmosis_superfluid_superfluid_proto_rawDescGZIP() []byte {
	file_osmosis_superfluid_superfluid_proto_rawDescOnce.Do(func() {
		file_osmosis_superfluid_superfluid_proto_rawDescData = protoimpl.X.CompressGZIP(file_osmosis_superfluid_superfluid_proto_rawDescData)
	})
	return file_osmosis_superfluid_superfluid_proto_rawDescData
}

var file_osmosis_superfluid_superfluid_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_osmosis_superfluid_superfluid_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_osmosis_superfluid_superfluid_proto_goTypes = []interface{}{
	(SuperfluidAssetType)(0),                    // 0: osmosis.superfluid.SuperfluidAssetType
	(*SuperfluidAsset)(nil),                     // 1: osmosis.superfluid.SuperfluidAsset
	(*SuperfluidIntermediaryAccount)(nil),       // 2: osmosis.superfluid.SuperfluidIntermediaryAccount
	(*OsmoEquivalentMultiplierRecord)(nil),      // 3: osmosis.superfluid.OsmoEquivalentMultiplierRecord
	(*SuperfluidDelegationRecord)(nil),          // 4: osmosis.superfluid.SuperfluidDelegationRecord
	(*LockIdIntermediaryAccountConnection)(nil), // 5: osmosis.superfluid.LockIdIntermediaryAccountConnection
	(*UnpoolWhitelistedPools)(nil),              // 6: osmosis.superfluid.UnpoolWhitelistedPools
	(*v1beta1.Coin)(nil),                        // 7: cosmos.base.v1beta1.Coin
}
var file_osmosis_superfluid_superfluid_proto_depIdxs = []int32{
	0, // 0: osmosis.superfluid.SuperfluidAsset.asset_type:type_name -> osmosis.superfluid.SuperfluidAssetType
	7, // 1: osmosis.superfluid.SuperfluidDelegationRecord.delegation_amount:type_name -> cosmos.base.v1beta1.Coin
	7, // 2: osmosis.superfluid.SuperfluidDelegationRecord.equivalent_staked_amount:type_name -> cosmos.base.v1beta1.Coin
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_osmosis_superfluid_superfluid_proto_init() }
func file_osmosis_superfluid_superfluid_proto_init() {
	if File_osmosis_superfluid_superfluid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_osmosis_superfluid_superfluid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperfluidAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_superfluid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperfluidIntermediaryAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_superfluid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsmoEquivalentMultiplierRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_superfluid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuperfluidDelegationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_superfluid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockIdIntermediaryAccountConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_osmosis_superfluid_superfluid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpoolWhitelistedPools); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_osmosis_superfluid_superfluid_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_osmosis_superfluid_superfluid_proto_goTypes,
		DependencyIndexes: file_osmosis_superfluid_superfluid_proto_depIdxs,
		EnumInfos:         file_osmosis_superfluid_superfluid_proto_enumTypes,
		MessageInfos:      file_osmosis_superfluid_superfluid_proto_msgTypes,
	}.Build()
	File_osmosis_superfluid_superfluid_proto = out.File
	file_osmosis_superfluid_superfluid_proto_rawDesc = nil
	file_osmosis_superfluid_superfluid_proto_goTypes = nil
	file_osmosis_superfluid_superfluid_proto_depIdxs = nil
}
